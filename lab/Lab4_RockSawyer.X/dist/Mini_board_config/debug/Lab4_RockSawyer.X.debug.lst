

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Nov 06 13:40:26 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec,minocg
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec,minocg
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1,minocg
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1,minocg
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,minocg
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,minocg
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,minocg
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,minocg
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,minocg
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2,minocg
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,minocg
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,minocg
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,minocg
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,minocg
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,minocg
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,minocg
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,minocg
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,minocg
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,minocg
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,minocg
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,minocg
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,minocg
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	param0,global,class=BANK0,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34   000000                     
    35                           ; Generated 21/07/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F45K20 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69   000000                     
    70                           	psect	idataBANK0
    71   0077EF                     __pidataBANK0:
    72                           	callstack 0
    73                           
    74                           ;initializer for main@F2686
    75   0077EF  70                 	db	112
    76   0077F0  6F                 	db	111
    77   0077F1  72                 	db	114
    78   0077F2  74                 	db	116
    79   0077F3  61                 	db	97
    80   0077F4  62                 	db	98
    81   0077F5  6C                 	db	108
    82   0077F6  65                 	db	101
    83   0077F7  00                 	db	0
    84   0077F8  00                 	db	0
    85   0077F9  00                 	db	0
    86   0077FA  00                 	db	0
    87   0077FB  00                 	db	0
    88   0077FC  00                 	db	0
    89   0077FD  00                 	db	0
    90   0077FE  32                 	db	50
    91   0077FF  65                 	db	101
    92   007800  4D                 	db	77
    93   007801  6F                 	db	111
    94   007802  74                 	db	116
    95   007803  00                 	db	0
    96   007804  00                 	db	0
    97   007805  00                 	db	0
    98   007806  00                 	db	0
    99   007807  00                 	db	0
   100   007808  00                 	db	0
   101   007809  00                 	db	0
   102   00780A  00                 	db	0
   103   00780B  00                 	db	0
   104   00780C  00                 	db	0
   105   00780D  33                 	db	51
   106   00780E  65                 	db	101
   107   00780F  4D                 	db	77
   108   007810  6F                 	db	111
   109   007811  74                 	db	116
   110   007812  00                 	db	0
   111   007813  00                 	db	0
   112   007814  00                 	db	0
   113   007815  00                 	db	0
   114   007816  00                 	db	0
   115   007817  00                 	db	0
   116   007818  00                 	db	0
   117   007819  00                 	db	0
   118   00781A  00                 	db	0
   119   00781B  00                 	db	0
   120                           
   121                           	psect	idataBANK1
   122   0078BA                     __pidataBANK1:
   123                           	callstack 0
   124                           
   125                           ;initializer for _matCGRAM
   126   0078BA  08                 	db	8
   127   0078BB  04                 	db	4
   128   0078BC  04                 	db	4
   129   0078BD  0A                 	db	10
   130   0078BE  11                 	db	17
   131   0078BF  1F                 	db	31
   132   0078C0  11                 	db	17
   133   0078C1  00                 	db	0
   134   0078C2  02                 	db	2
   135   0078C3  04                 	db	4
   136   0078C4  0E                 	db	14
   137   0078C5  11                 	db	17
   138   0078C6  1F                 	db	31
   139   0078C7  10                 	db	16
   140   0078C8  0E                 	db	14
   141   0078C9  00                 	db	0
   142   0078CA  02                 	db	2
   143   0078CB  04                 	db	4
   144   0078CC  1F                 	db	31
   145   0078CD  10                 	db	16
   146   0078CE  1E                 	db	30
   147   0078CF  10                 	db	16
   148   0078D0  1F                 	db	31
   149   0078D1  00                 	db	0
   150   0078D2  08                 	db	8
   151   0078D3  04                 	db	4
   152   0078D4  0E                 	db	14
   153   0078D5  11                 	db	17
   154   0078D6  1F                 	db	31
   155   0078D7  10                 	db	16
   156   0078D8  0E                 	db	14
   157   0078D9  00                 	db	0
   158   0078DA  08                 	db	8
   159   0078DB  04                 	db	4
   160   0078DC  1F                 	db	31
   161   0078DD  10                 	db	16
   162   0078DE  1E                 	db	30
   163   0078DF  10                 	db	16
   164   0078E0  1F                 	db	31
   165   0078E1  00                 	db	0
   166   0078E2  04                 	db	4
   167   0078E3  0A                 	db	10
   168   0078E4  0E                 	db	14
   169   0078E5  11                 	db	17
   170   0078E6  1F                 	db	31
   171   0078E7  10                 	db	16
   172   0078E8  0E                 	db	14
   173   0078E9  00                 	db	0
   174   0078EA  08                 	db	8
   175   0078EB  04                 	db	4
   176   0078EC  0E                 	db	14
   177   0078ED  01                 	db	1
   178   0078EE  0F                 	db	15
   179   0078EF  11                 	db	17
   180   0078F0  0F                 	db	15
   181   0078F1  00                 	db	0
   182   0078F2  04                 	db	4
   183   0078F3  0A                 	db	10
   184   0078F4  0E                 	db	14
   185   0078F5  01                 	db	1
   186   0078F6  0F                 	db	15
   187   0078F7  11                 	db	17
   188   0078F8  0F                 	db	15
   189   0078F9  00                 	db	0
   190   000000                     _RCREG	set	4014
   191   000000                     _TXREG	set	4013
   192   000000                     _ANSEL	set	3966
   193   000000                     _TRISA	set	3986
   194   000000                     _RCSTAbits	set	4011
   195   000000                     _TXSTAbits	set	4012
   196   000000                     _SPBRG	set	4015
   197   000000                     _SPBRGH	set	4016
   198   000000                     _RCIF	set	31989
   199   000000                     _TRISD	set	3989
   200   000000                     _TRISCbits	set	3988
   201   000000                     _TRISB	set	3987
   202   000000                     _PORTAbits	set	3968
   203   000000                     _PORTD	set	3971
   204   000000                     _BAUDCONbits	set	4024
   205                           
   206                           ; #config settings
   207                           
   208                           	psect	cinit
   209   00793C                     __pcinit:
   210                           	callstack 0
   211   00793C                     start_initialization:
   212                           	callstack 0
   213   00793C                     __initialization:
   214                           	callstack 0
   215                           
   216                           ; Initialize objects allocated to BANK1 (64 bytes)
   217                           ; load TBLPTR registers with __pidataBANK1
   218   00793C  0EBA               	movlw	low __pidataBANK1
   219   00793E  6EF6               	movwf	tblptrl,c
   220   007940  0E78               	movlw	high __pidataBANK1
   221   007942  6EF7               	movwf	tblptrh,c
   222   007944  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   223   007946  6EF8               	movwf	tblptru,c
   224   007948  EE01  F000         	lfsr	0,__pdataBANK1
   225   00794C  EE10 F040          	lfsr	1,64
   226   007950                     copy_data0:
   227   007950  0009               	tblrd		*+
   228   007952  CFF5 FFEE          	movff	tablat,postinc0
   229   007956  50E5               	movf	postdec1,w,c
   230   007958  50E1               	movf	fsr1l,w,c
   231   00795A  E1FA               	bnz	copy_data0
   232                           
   233                           ; Initialize objects allocated to BANK0 (45 bytes)
   234                           ; load TBLPTR registers with __pidataBANK0
   235   00795C  0EEF               	movlw	low __pidataBANK0
   236   00795E  6EF6               	movwf	tblptrl,c
   237   007960  0E77               	movlw	high __pidataBANK0
   238   007962  6EF7               	movwf	tblptrh,c
   239   007964  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   240   007966  6EF8               	movwf	tblptru,c
   241   007968  EE00  F0B0         	lfsr	0,__pdataBANK0
   242   00796C  EE10 F02D          	lfsr	1,45
   243   007970                     copy_data1:
   244   007970  0009               	tblrd		*+
   245   007972  CFF5 FFEE          	movff	tablat,postinc0
   246   007976  50E5               	movf	postdec1,w,c
   247   007978  50E1               	movf	fsr1l,w,c
   248   00797A  E1FA               	bnz	copy_data1
   249   00797C                     end_of_initialization:
   250                           	callstack 0
   251   00797C                     __end_of__initialization:
   252                           	callstack 0
   253   00797C  0100               	movlb	0
   254   00797E  EF0E  F03C         	goto	_main	;jump to C main() function
   255                           
   256                           	psect	dataBANK0
   257   0000B0                     __pdataBANK0:
   258                           	callstack 0
   259   0000B0                     main@F2686:
   260                           	callstack 0
   261   0000B0                     	ds	45
   262                           
   263                           	psect	dataBANK1
   264   000100                     __pdataBANK1:
   265                           	callstack 0
   266   000100                     _matCGRAM:
   267                           	callstack 0
   268   000100                     	ds	64
   269                           
   270                           	psect	cstackBANK0
   271   000060                     __pcstackBANK0:
   272                           	callstack 0
   273   000060                     ??_lcd_ecrireDonnees:
   274   000060                     ??_lcd_busy:
   275   000060                     ?_strlen:
   276                           	callstack 0
   277   000060                     getch@c:
   278                           	callstack 0
   279   000060                     strlen@s:
   280                           	callstack 0
   281                           
   282                           ; 2 bytes @ 0x0
   283   000060                     	ds	1
   284   000061                     lcd_ecrireDonnees@donnee:
   285                           	callstack 0
   286   000061                     lcd_busy@adresse:
   287                           	callstack 0
   288                           
   289                           ; 1 bytes @ 0x1
   290   000061                     	ds	1
   291   000062                     ??_lcd_resetSequence:
   292   000062                     lcd_wrCom@commande:
   293                           	callstack 0
   294   000062                     lcd_wrData@caractere:
   295                           	callstack 0
   296   000062                     strlen@cp:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0x2
   300   000062                     	ds	1
   301   000063                     ??_lcd_initCGRam:
   302   000063                     lcd_gotoXY@y:
   303                           	callstack 0
   304   000063                     lcd_ecritChar@car:
   305                           	callstack 0
   306                           
   307                           ; 1 bytes @ 0x3
   308   000063                     	ds	1
   309   000064                     lcd_gotoXY@x:
   310                           	callstack 0
   311   000064                     lcd_ecritChar@posRam:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x4
   315   000064                     	ds	1
   316   000065                     lcd_initCGRam@i:
   317                           	callstack 0
   318   000065                     jouePendu@mot:
   319                           	callstack 0
   320                           
   321                           ; 2 bytes @ 0x5
   322   000065                     	ds	1
   323   000066                     lcd_initCGRam@j:
   324                           	callstack 0
   325                           
   326                           ; 1 bytes @ 0x6
   327   000066                     	ds	1
   328   000067                     ??_jouePendu:
   329                           
   330                           ; 1 bytes @ 0x7
   331   000067                     	ds	1
   332   000068                     jouePendu@trouve:
   333                           	callstack 0
   334                           
   335                           ; 15 bytes @ 0x8
   336   000068                     	ds	15
   337   000077                     jouePendu@Lettre:
   338                           	callstack 0
   339                           
   340                           ; 1 bytes @ 0x17
   341   000077                     	ds	1
   342   000078                     jouePendu@toutTrouver:
   343                           	callstack 0
   344                           
   345                           ; 1 bytes @ 0x18
   346   000078                     	ds	1
   347   000079                     jouePendu@i:
   348                           	callstack 0
   349                           
   350                           ; 2 bytes @ 0x19
   351   000079                     	ds	2
   352   00007B                     jouePendu@i_89:
   353                           	callstack 0
   354                           
   355                           ; 2 bytes @ 0x1B
   356   00007B                     	ds	2
   357   00007D                     jouePendu@i_87:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x1D
   361   00007D                     	ds	2
   362   00007F                     jouePendu@longMess:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x1F
   366   00007F                     	ds	2
   367   000081                     jouePendu@i_88:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x21
   371   000081                     	ds	2
   372   000083                     main@messages:
   373                           	callstack 0
   374                           
   375                           ; 45 bytes @ 0x23
   376   000083                     	ds	45
   377                           
   378 ;;
   379 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   380 ;;
   381 ;; *************** function _main *****************
   382 ;; Defined at:
   383 ;;		line 31 in file "main.c"
   384 ;; Parameters:    Size  Location     Type
   385 ;;		None
   386 ;; Auto vars:     Size  Location     Type
   387 ;;  messages       45   35[BANK0 ] unsigned char [15][3]
   388 ;; Return value:  Size  Location     Type
   389 ;;                  1    wreg      void 
   390 ;; Registers used:
   391 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   392 ;; Tracked objects:
   393 ;;		On entry : 0/0
   394 ;;		On exit  : 0/0
   395 ;;		Unchanged: 0/0
   396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   397 ;;      Params:         0       0       0       0       0       0       0
   398 ;;      Locals:         0      45       0       0       0       0       0
   399 ;;      Temps:          0       0       0       0       0       0       0
   400 ;;      Totals:         0      45       0       0       0       0       0
   401 ;;Total ram usage:       45 bytes
   402 ;; Hardware stack levels required when called: 6
   403 ;; This function calls:
   404 ;;		_init_serie
   405 ;;		_initialisation
   406 ;;		_jouePendu
   407 ;;		_lcd_init
   408 ;; This function is called by:
   409 ;;		Startup code after reset
   410 ;; This function uses a non-reentrant model
   411 ;;
   412                           
   413                           	psect	text0
   414   00781C                     __ptext0:
   415                           	callstack 0
   416   00781C                     _main:
   417                           	callstack 25
   418   00781C                     
   419                           ;main.c: 33: char messages[3][15] = {"portable","2eMot","3eMot"};
   420   00781C  EE20  F0B0         	lfsr	2,main@F2686
   421   007820  EE10  F083         	lfsr	1,main@messages
   422   007824  0E2C               	movlw	44
   423   007826                     u441:
   424   007826  CFDB FFE3          	movff	plusw2,plusw1
   425   00782A  06E8               	decf	wreg,f,c
   426   00782C  E2FC               	bc	u441
   427   00782E                     
   428                           ;main.c: 34: initialisation();
   429   00782E  ECA7  F03B         	call	_initialisation	;wreg free
   430   007832                     
   431                           ;main.c: 35: lcd_init();
   432   007832  ECE3  F03B         	call	_lcd_init	;wreg free
   433   007836                     
   434                           ;main.c: 36: init_serie();
   435   007836  ECD4  F03B         	call	_init_serie	;wreg free
   436   00783A                     
   437                           ;main.c: 39: jouePendu(messages[0]);
   438   00783A  0E83               	movlw	low main@messages
   439   00783C  0100               	movlb	0	; force () banked
   440   00783E  6F65               	movwf	jouePendu@mot& (0+255),b
   441   007840  0E00               	movlw	high main@messages
   442   007842  6F66               	movwf	(jouePendu@mot+1)& (0+255),b
   443   007844  ECDE  F03D         	call	_jouePendu	;wreg free
   444   007848  EF00  F000         	goto	start
   445   00784C                     __end_of_main:
   446                           	callstack 0
   447                           
   448 ;; *************** function _lcd_init *****************
   449 ;; Defined at:
   450 ;;		line 258 in file "Lcd4Lignes.c"
   451 ;; Parameters:    Size  Location     Type
   452 ;;		None
   453 ;; Auto vars:     Size  Location     Type
   454 ;;		None
   455 ;; Return value:  Size  Location     Type
   456 ;;                  1    wreg      void 
   457 ;; Registers used:
   458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   459 ;; Tracked objects:
   460 ;;		On entry : 0/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   464 ;;      Params:         0       0       0       0       0       0       0
   465 ;;      Locals:         0       0       0       0       0       0       0
   466 ;;      Temps:          0       0       0       0       0       0       0
   467 ;;      Totals:         0       0       0       0       0       0       0
   468 ;;Total ram usage:        0 bytes
   469 ;; Hardware stack levels used: 1
   470 ;; Hardware stack levels required when called: 5
   471 ;; This function calls:
   472 ;;		_lcd_initCGRam
   473 ;;		_lcd_resetSequence
   474 ;;		_lcd_wrCom
   475 ;; This function is called by:
   476 ;;		_main
   477 ;; This function uses a non-reentrant model
   478 ;;
   479                           
   480                           	psect	text1
   481   0077C6                     __ptext1:
   482                           	callstack 0
   483   0077C6                     _lcd_init:
   484                           	callstack 25
   485   0077C6                     
   486                           ;Lcd4Lignes.c: 261: lcd_resetSequence();
   487   0077C6  ECEB  F03C         	call	_lcd_resetSequence	;wreg free
   488                           
   489                           ;Lcd4Lignes.c: 262: lcd_wrCom(0x28);
   490   0077CA  0E28               	movlw	40
   491   0077CC  EC20  F03D         	call	_lcd_wrCom
   492                           
   493                           ;Lcd4Lignes.c: 263: lcd_wrCom(0x0F);
   494   0077D0  0E0F               	movlw	15
   495   0077D2  EC20  F03D         	call	_lcd_wrCom
   496                           
   497                           ;Lcd4Lignes.c: 264: lcd_wrCom(0x01);
   498   0077D6  0E01               	movlw	1
   499   0077D8  EC20  F03D         	call	_lcd_wrCom
   500                           
   501                           ;Lcd4Lignes.c: 265: lcd_wrCom(0x06);
   502   0077DC  0E06               	movlw	6
   503   0077DE  EC20  F03D         	call	_lcd_wrCom
   504                           
   505                           ;Lcd4Lignes.c: 266: lcd_wrCom(0x80);
   506   0077E2  0E80               	movlw	128
   507   0077E4  EC20  F03D         	call	_lcd_wrCom
   508   0077E8                     
   509                           ;Lcd4Lignes.c: 267: lcd_initCGRam();
   510   0077E8  EC8F  F03D         	call	_lcd_initCGRam	;wreg free
   511   0077EC  0012               	return		;funcret
   512   0077EE                     __end_of_lcd_init:
   513                           	callstack 0
   514                           
   515 ;; *************** function _lcd_resetSequence *****************
   516 ;; Defined at:
   517 ;;		line 221 in file "Lcd4Lignes.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;		None
   520 ;; Auto vars:     Size  Location     Type
   521 ;;		None
   522 ;; Return value:  Size  Location     Type
   523 ;;                  1    wreg      void 
   524 ;; Registers used:
   525 ;;		wreg, status,2, status,0, cstack
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   531 ;;      Params:         0       0       0       0       0       0       0
   532 ;;      Locals:         0       0       0       0       0       0       0
   533 ;;      Temps:          0       1       0       0       0       0       0
   534 ;;      Totals:         0       1       0       0       0       0       0
   535 ;;Total ram usage:        1 bytes
   536 ;; Hardware stack levels used: 1
   537 ;; Hardware stack levels required when called: 1
   538 ;; This function calls:
   539 ;;		_lcd_ecrireDonnees
   540 ;;		_lcd_strobeEnableBit
   541 ;; This function is called by:
   542 ;;		_lcd_init
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           	psect	text2
   547   0079D6                     __ptext2:
   548                           	callstack 0
   549   0079D6                     _lcd_resetSequence:
   550                           	callstack 28
   551   0079D6                     
   552                           ;Lcd4Lignes.c: 226: TRISD = 0b00000000;
   553   0079D6  0E00               	movlw	0
   554   0079D8  6E95               	movwf	149,c	;volatile
   555   0079DA                     
   556                           ;Lcd4Lignes.c: 228: _delay((unsigned long)((40)*(1000000/4000.0)));
   557   0079DA  0E0D               	movlw	13
   558   0079DC  0100               	movlb	0	; force () banked
   559   0079DE  6F62               	movwf	??_lcd_resetSequence& (0+255),b
   560   0079E0  0EFB               	movlw	251
   561   0079E2                     u467:
   562   0079E2  2EE8               	decfsz	wreg,f,c
   563   0079E4  D7FE               	bra	u467
   564   0079E6  2F62               	decfsz	??_lcd_resetSequence& (0+255),f,b
   565   0079E8  D7FC               	bra	u467
   566   0079EA  F000 F000          	nop2	
   567   0079EE                     
   568                           ;Lcd4Lignes.c: 229: PORTAbits.RA0 = 0;
   569   0079EE  9080               	bcf	128,0,c	;volatile
   570   0079F0                     
   571                           ;Lcd4Lignes.c: 230: PORTAbits.RA1 = 0;
   572   0079F0  9280               	bcf	128,1,c	;volatile
   573   0079F2                     
   574                           ;Lcd4Lignes.c: 232: lcd_ecrireDonnees(0x03);
   575   0079F2  0E03               	movlw	3
   576   0079F4  ECC6  F03B         	call	_lcd_ecrireDonnees
   577   0079F8                     
   578                           ;Lcd4Lignes.c: 233: lcd_strobeEnableBit();
   579   0079F8  EC9F  F03B         	call	_lcd_strobeEnableBit	;wreg free
   580   0079FC                     
   581                           ;Lcd4Lignes.c: 234: _delay((unsigned long)((40)*(1000000/4000000.0)));
   582   0079FC  0E03               	movlw	3
   583   0079FE                     u477:
   584   0079FE  2EE8               	decfsz	wreg,f,c
   585   007A00  D7FE               	bra	u477
   586   007A02  F000               	nop	
   587   007A04                     
   588                           ;Lcd4Lignes.c: 237: lcd_ecrireDonnees(0x03);
   589   007A04  0E03               	movlw	3
   590   007A06  ECC6  F03B         	call	_lcd_ecrireDonnees
   591   007A0A                     
   592                           ;Lcd4Lignes.c: 238: lcd_strobeEnableBit();
   593   007A0A  EC9F  F03B         	call	_lcd_strobeEnableBit	;wreg free
   594   007A0E                     
   595                           ;Lcd4Lignes.c: 239: _delay((unsigned long)((40)*(1000000/4000000.0)));
   596   007A0E  0E03               	movlw	3
   597   007A10                     u487:
   598   007A10  2EE8               	decfsz	wreg,f,c
   599   007A12  D7FE               	bra	u487
   600   007A14  F000               	nop	
   601   007A16                     
   602                           ;Lcd4Lignes.c: 241: lcd_ecrireDonnees(0x03);
   603   007A16  0E03               	movlw	3
   604   007A18  ECC6  F03B         	call	_lcd_ecrireDonnees
   605   007A1C                     
   606                           ;Lcd4Lignes.c: 242: lcd_strobeEnableBit();
   607   007A1C  EC9F  F03B         	call	_lcd_strobeEnableBit	;wreg free
   608   007A20                     
   609                           ;Lcd4Lignes.c: 243: _delay((unsigned long)((40)*(1000000/4000000.0)));
   610   007A20  0E03               	movlw	3
   611   007A22                     u497:
   612   007A22  2EE8               	decfsz	wreg,f,c
   613   007A24  D7FE               	bra	u497
   614   007A26  F000               	nop	
   615   007A28                     
   616                           ;Lcd4Lignes.c: 245: lcd_ecrireDonnees(0x02);
   617   007A28  0E02               	movlw	2
   618   007A2A  ECC6  F03B         	call	_lcd_ecrireDonnees
   619   007A2E                     
   620                           ;Lcd4Lignes.c: 246: lcd_strobeEnableBit();
   621   007A2E  EC9F  F03B         	call	_lcd_strobeEnableBit	;wreg free
   622   007A32                     
   623                           ;Lcd4Lignes.c: 247: _delay((unsigned long)((40)*(1000000/4000000.0)));
   624   007A32  0E03               	movlw	3
   625   007A34                     u507:
   626   007A34  2EE8               	decfsz	wreg,f,c
   627   007A36  D7FE               	bra	u507
   628   007A38  F000               	nop	
   629   007A3A                     
   630                           ;Lcd4Lignes.c: 249: TRISD = 0b00001111;
   631   007A3A  0E0F               	movlw	15
   632   007A3C  6E95               	movwf	149,c	;volatile
   633   007A3E  0012               	return		;funcret
   634   007A40                     __end_of_lcd_resetSequence:
   635                           	callstack 0
   636                           
   637 ;; *************** function _lcd_initCGRam *****************
   638 ;; Defined at:
   639 ;;		line 417 in file "Lcd4Lignes.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;		None
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  j               1    6[BANK0 ] unsigned char 
   644 ;;  i               1    5[BANK0 ] unsigned char 
   645 ;; Return value:  Size  Location     Type
   646 ;;                  1    wreg      void 
   647 ;; Registers used:
   648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   654 ;;      Params:         0       0       0       0       0       0       0
   655 ;;      Locals:         0       2       0       0       0       0       0
   656 ;;      Temps:          0       2       0       0       0       0       0
   657 ;;      Totals:         0       4       0       0       0       0       0
   658 ;;Total ram usage:        4 bytes
   659 ;; Hardware stack levels used: 1
   660 ;; Hardware stack levels required when called: 4
   661 ;; This function calls:
   662 ;;		_lcd_curseurHome
   663 ;;		_lcd_wrCom
   664 ;;		_lcd_wrData
   665 ;; This function is called by:
   666 ;;		_lcd_init
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           	psect	text3
   671   007B1E                     __ptext3:
   672                           	callstack 0
   673   007B1E                     _lcd_initCGRam:
   674                           	callstack 25
   675   007B1E                     
   676                           ;Lcd4Lignes.c: 419: char i,j;;Lcd4Lignes.c: 421: lcd_wrCom(0x40);
   677   007B1E  0E40               	movlw	64
   678   007B20  EC20  F03D         	call	_lcd_wrCom
   679   007B24                     
   680                           ;Lcd4Lignes.c: 422: for(i=0;i<8;i++)
   681   007B24  0E00               	movlw	0
   682   007B26  0100               	movlb	0	; force () banked
   683   007B28  6F65               	movwf	lcd_initCGRam@i& (0+255),b
   684   007B2A                     
   685                           ; BSR set to: 0
   686   007B2A  0E07               	movlw	7
   687   007B2C  0100               	movlb	0	; force () banked
   688   007B2E  6565               	cpfsgt	lcd_initCGRam@i& (0+255),b
   689   007B30  EF9C  F03D         	goto	u301
   690   007B34  EF9E  F03D         	goto	u300
   691   007B38                     u301:
   692   007B38  EFA0  F03D         	goto	l1495
   693   007B3C                     u300:
   694   007B3C  EFDB  F03D         	goto	l1511
   695   007B40                     l1495:
   696                           
   697                           ; BSR set to: 0
   698                           ;Lcd4Lignes.c: 423: {;Lcd4Lignes.c: 424: for(j=0;j<8;j++)
   699   007B40  0E00               	movlw	0
   700   007B42  0100               	movlb	0	; force () banked
   701   007B44  6F66               	movwf	lcd_initCGRam@j& (0+255),b
   702   007B46                     
   703                           ; BSR set to: 0
   704   007B46  0E07               	movlw	7
   705   007B48  0100               	movlb	0	; force () banked
   706   007B4A  6566               	cpfsgt	lcd_initCGRam@j& (0+255),b
   707   007B4C  EFAA  F03D         	goto	u311
   708   007B50  EFAC  F03D         	goto	u310
   709   007B54                     u311:
   710   007B54  EFAE  F03D         	goto	l1501
   711   007B58                     u310:
   712   007B58  EFD0  F03D         	goto	l1507
   713   007B5C                     l1501:
   714                           
   715                           ; BSR set to: 0
   716                           ;Lcd4Lignes.c: 425: lcd_wrData(matCGRAM[i][j]);
   717   007B5C  0100               	movlb	0	; force () banked
   718   007B5E  5165               	movf	lcd_initCGRam@i& (0+255),w,b
   719   007B60  0D08               	mullw	8
   720   007B62  0E00               	movlw	low _matCGRAM
   721   007B64  24F3               	addwf	243,w,c
   722   007B66  0100               	movlb	0	; force () banked
   723   007B68  6F63               	movwf	??_lcd_initCGRam& (0+255),b
   724   007B6A  0E01               	movlw	high _matCGRAM
   725   007B6C  20F4               	addwfc	prodh,w,c
   726   007B6E  6F64               	movwf	(??_lcd_initCGRam+1)& (0+255),b
   727   007B70  0100               	movlb	0	; force () banked
   728   007B72  5166               	movf	lcd_initCGRam@j& (0+255),w,b
   729   007B74  0100               	movlb	0	; force () banked
   730   007B76  2563               	addwf	??_lcd_initCGRam& (0+255),w,b
   731   007B78  6ED9               	movwf	fsr2l,c
   732   007B7A  0100               	movlb	0	; force () banked
   733   007B7C  0E00               	movlw	0
   734   007B7E  0100               	movlb	0	; force () banked
   735   007B80  2164               	addwfc	(??_lcd_initCGRam+1)& (0+255),w,b
   736   007B82  6EDA               	movwf	fsr2h,c
   737   007B84  50DF               	movf	indf2,w,c
   738   007B86  EC26  F03C         	call	_lcd_wrData
   739   007B8A  0100               	movlb	0	; force () banked
   740   007B8C  2B66               	incf	lcd_initCGRam@j& (0+255),f,b
   741   007B8E                     
   742                           ; BSR set to: 0
   743   007B8E  0E07               	movlw	7
   744   007B90  0100               	movlb	0	; force () banked
   745   007B92  6566               	cpfsgt	lcd_initCGRam@j& (0+255),b
   746   007B94  EFCE  F03D         	goto	u321
   747   007B98  EFD0  F03D         	goto	u320
   748   007B9C                     u321:
   749   007B9C  EFAE  F03D         	goto	l1501
   750   007BA0                     u320:
   751   007BA0                     l1507:
   752                           
   753                           ; BSR set to: 0
   754   007BA0  0100               	movlb	0	; force () banked
   755   007BA2  2B65               	incf	lcd_initCGRam@i& (0+255),f,b
   756   007BA4                     
   757                           ; BSR set to: 0
   758   007BA4  0E07               	movlw	7
   759   007BA6  0100               	movlb	0	; force () banked
   760   007BA8  6565               	cpfsgt	lcd_initCGRam@i& (0+255),b
   761   007BAA  EFD9  F03D         	goto	u331
   762   007BAE  EFDB  F03D         	goto	u330
   763   007BB2                     u331:
   764   007BB2  EFA0  F03D         	goto	l1495
   765   007BB6                     u330:
   766   007BB6                     l1511:
   767                           
   768                           ; BSR set to: 0
   769                           ;Lcd4Lignes.c: 426: };Lcd4Lignes.c: 427: lcd_curseurHome();
   770   007BB6  ECA3  F03B         	call	_lcd_curseurHome	;wreg free
   771   007BBA  0012               	return		;funcret
   772   007BBC                     __end_of_lcd_initCGRam:
   773                           	callstack 0
   774                           
   775 ;; *************** function _lcd_curseurHome *****************
   776 ;; Defined at:
   777 ;;		line 288 in file "Lcd4Lignes.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;		None
   780 ;; Auto vars:     Size  Location     Type
   781 ;;		None
   782 ;; Return value:  Size  Location     Type
   783 ;;                  1    wreg      void 
   784 ;; Registers used:
   785 ;;		wreg, status,2, status,0, cstack
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   791 ;;      Params:         0       0       0       0       0       0       0
   792 ;;      Locals:         0       0       0       0       0       0       0
   793 ;;      Temps:          0       0       0       0       0       0       0
   794 ;;      Totals:         0       0       0       0       0       0       0
   795 ;;Total ram usage:        0 bytes
   796 ;; Hardware stack levels used: 1
   797 ;; Hardware stack levels required when called: 3
   798 ;; This function calls:
   799 ;;		_lcd_wrCom
   800 ;; This function is called by:
   801 ;;		_lcd_initCGRam
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text4
   806   007746                     __ptext4:
   807                           	callstack 0
   808   007746                     _lcd_curseurHome:
   809                           	callstack 25
   810   007746                     
   811                           ;Lcd4Lignes.c: 290: lcd_wrCom(0x02);
   812   007746  0E02               	movlw	2
   813   007748  EC20  F03D         	call	_lcd_wrCom
   814   00774C  0012               	return		;funcret
   815   00774E                     __end_of_lcd_curseurHome:
   816                           	callstack 0
   817                           
   818 ;; *************** function _jouePendu *****************
   819 ;; Defined at:
   820 ;;		line 80 in file "main.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;  mot             2    5[BANK0 ] PTR unsigned char 
   823 ;;		 -> main@messages(45), 
   824 ;; Auto vars:     Size  Location     Type
   825 ;;  i               2   27[BANK0 ] int 
   826 ;;  i               2   33[BANK0 ] int 
   827 ;;  i               2   29[BANK0 ] int 
   828 ;;  i               2   25[BANK0 ] int 
   829 ;;  trouve         15    8[BANK0 ] unsigned char [15]
   830 ;;  longMess        2   31[BANK0 ] int 
   831 ;;  toutTrouver     1   24[BANK0 ] unsigned char 
   832 ;;  Lettre          1   23[BANK0 ] unsigned char 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  1    wreg      void 
   835 ;; Registers used:
   836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   842 ;;      Params:         0       2       0       0       0       0       0
   843 ;;      Locals:         0      27       0       0       0       0       0
   844 ;;      Temps:          0       1       0       0       0       0       0
   845 ;;      Totals:         0      30       0       0       0       0       0
   846 ;;Total ram usage:       30 bytes
   847 ;; Hardware stack levels used: 1
   848 ;; Hardware stack levels required when called: 4
   849 ;; This function calls:
   850 ;;		_getch
   851 ;;		_kbhit
   852 ;;		_lcd_ecritChar
   853 ;;		_lcd_gotoXY
   854 ;;		_strlen
   855 ;; This function is called by:
   856 ;;		_main
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text5
   861   007BBC                     __ptext5:
   862                           	callstack 0
   863   007BBC                     _jouePendu:
   864                           	callstack 26
   865   007BBC                     
   866                           ;main.c: 82: bool toutTrouver = 1;
   867   007BBC  0E01               	movlw	1
   868   007BBE  0100               	movlb	0	; force () banked
   869   007BC0  6F78               	movwf	jouePendu@toutTrouver& (0+255),b
   870                           
   871                           ;main.c: 83: char Lettre = 0;
   872   007BC2  0E00               	movlw	0
   873   007BC4  0100               	movlb	0	; force () banked
   874   007BC6  6F77               	movwf	jouePendu@Lettre& (0+255),b
   875   007BC8                     
   876                           ; BSR set to: 0
   877                           ;main.c: 84: bool trouve[15];;main.c: 85: int longMess = strlen(mot);
   878   007BC8  C065  F060         	movff	jouePendu@mot,strlen@s
   879   007BCC  C066  F061         	movff	jouePendu@mot+1,strlen@s+1
   880   007BD0  EC40  F03C         	call	_strlen	;wreg free
   881   007BD4  C060  F07F         	movff	?_strlen,jouePendu@longMess
   882   007BD8  C061  F080         	movff	?_strlen+1,jouePendu@longMess+1
   883   007BDC                     
   884                           ;main.c: 87: for(int i = 0; i < longMess; i++)
   885   007BDC  0E00               	movlw	0
   886   007BDE  0100               	movlb	0	; force () banked
   887   007BE0  6F7A               	movwf	(jouePendu@i+1)& (0+255),b
   888   007BE2  0E00               	movlw	0
   889   007BE4  6F79               	movwf	jouePendu@i& (0+255),b
   890   007BE6  EF03  F03E         	goto	l1529
   891   007BEA                     l1523:
   892                           
   893                           ; BSR set to: 0
   894                           ;main.c: 88: {;main.c: 89: trouve[i] = 0;
   895   007BEA  0E68               	movlw	low jouePendu@trouve
   896   007BEC  0100               	movlb	0	; force () banked
   897   007BEE  2579               	addwf	jouePendu@i& (0+255),w,b
   898   007BF0  6ED9               	movwf	fsr2l,c
   899   007BF2  0E00               	movlw	high jouePendu@trouve
   900   007BF4  217A               	addwfc	(jouePendu@i+1)& (0+255),w,b
   901   007BF6  6EDA               	movwf	fsr2h,c
   902   007BF8  6ADF               	clrf	indf2,c
   903   007BFA                     
   904                           ; BSR set to: 0
   905                           ;main.c: 90: lcd_ecritChar('_');
   906   007BFA  0E5F               	movlw	95
   907   007BFC  ECC1  F03C         	call	_lcd_ecritChar
   908   007C00  0100               	movlb	0	; force () banked
   909   007C02  4B79               	infsnz	jouePendu@i& (0+255),f,b
   910   007C04  2B7A               	incf	(jouePendu@i+1)& (0+255),f,b
   911   007C06                     l1529:
   912                           
   913                           ; BSR set to: 0
   914   007C06  0100               	movlb	0	; force () banked
   915   007C08  517F               	movf	jouePendu@longMess& (0+255),w,b
   916   007C0A  0100               	movlb	0	; force () banked
   917   007C0C  5D79               	subwf	jouePendu@i& (0+255),w,b
   918   007C0E  517A               	movf	(jouePendu@i+1)& (0+255),w,b
   919   007C10  0A80               	xorlw	128
   920   007C12  0100               	movlb	0	; force () banked
   921   007C14  6F67               	movwf	??_jouePendu& (0+255),b
   922   007C16  0100               	movlb	0	; force () banked
   923   007C18  5180               	movf	(jouePendu@longMess+1)& (0+255),w,b
   924   007C1A  0A80               	xorlw	128
   925   007C1C  0100               	movlb	0	; force () banked
   926   007C1E  5967               	subwfb	??_jouePendu& (0+255),w,b
   927   007C20  A0D8               	btfss	status,0,c
   928   007C22  EF15  F03E         	goto	u341
   929   007C26  EF17  F03E         	goto	u340
   930   007C2A                     u341:
   931   007C2A  EFF5  F03D         	goto	l1523
   932   007C2E                     u340:
   933   007C2E                     l1531:
   934                           
   935                           ; BSR set to: 0
   936                           ;main.c: 93: {;main.c: 94: if(kbhit())
   937   007C2E  ECBA  F03B         	call	_kbhit	;wreg free
   938   007C32  0100               	movlb	0	; force () banked
   939   007C34  A0D8               	btfss	status,0,c
   940   007C36  EF1F  F03E         	goto	u351
   941   007C3A  EF21  F03E         	goto	u350
   942   007C3E                     u351:
   943   007C3E  EFD6  F03E         	goto	l1571
   944   007C42                     u350:
   945   007C42                     
   946                           ; BSR set to: 0
   947                           ;main.c: 95: {;main.c: 96: Lettre = getch();
   948   007C42  ECAE  F03B         	call	_getch	;wreg free
   949   007C46  0100               	movlb	0	; force () banked
   950   007C48  6F77               	movwf	jouePendu@Lettre& (0+255),b
   951   007C4A                     
   952                           ; BSR set to: 0
   953                           ;main.c: 97: for(int i = 0; i < longMess; i++)
   954   007C4A  0E00               	movlw	0
   955   007C4C  0100               	movlb	0	; force () banked
   956   007C4E  6F7E               	movwf	(jouePendu@i_87+1)& (0+255),b
   957   007C50  0E00               	movlw	0
   958   007C52  6F7D               	movwf	jouePendu@i_87& (0+255),b
   959   007C54  EF4C  F03E         	goto	l1543
   960   007C58                     l1537:
   961                           
   962                           ; BSR set to: 0
   963                           ;main.c: 98: {;main.c: 99: if(Lettre == mot[i])
   964   007C58  0100               	movlb	0	; force () banked
   965   007C5A  517D               	movf	jouePendu@i_87& (0+255),w,b
   966   007C5C  0100               	movlb	0	; force () banked
   967   007C5E  2565               	addwf	jouePendu@mot& (0+255),w,b
   968   007C60  6ED9               	movwf	fsr2l,c
   969   007C62  0100               	movlb	0	; force () banked
   970   007C64  517E               	movf	(jouePendu@i_87+1)& (0+255),w,b
   971   007C66  0100               	movlb	0	; force () banked
   972   007C68  2166               	addwfc	(jouePendu@mot+1)& (0+255),w,b
   973   007C6A  6EDA               	movwf	fsr2h,c
   974   007C6C  0100               	movlb	0	; force () banked
   975   007C6E  5177               	movf	jouePendu@Lettre& (0+255),w,b
   976   007C70  18DE               	xorwf	postinc2,w,c
   977   007C72  A4D8               	btfss	status,2,c
   978   007C74  EF3E  F03E         	goto	u361
   979   007C78  EF40  F03E         	goto	u360
   980   007C7C                     u361:
   981   007C7C  EF49  F03E         	goto	l1541
   982   007C80                     u360:
   983   007C80                     
   984                           ; BSR set to: 0
   985                           ;main.c: 100: {;main.c: 101: trouve[i] = 1;
   986   007C80  0E68               	movlw	low jouePendu@trouve
   987   007C82  0100               	movlb	0	; force () banked
   988   007C84  257D               	addwf	jouePendu@i_87& (0+255),w,b
   989   007C86  6ED9               	movwf	fsr2l,c
   990   007C88  0E00               	movlw	high jouePendu@trouve
   991   007C8A  217E               	addwfc	(jouePendu@i_87+1)& (0+255),w,b
   992   007C8C  6EDA               	movwf	fsr2h,c
   993   007C8E  0E01               	movlw	1
   994   007C90  6EDF               	movwf	indf2,c
   995   007C92                     l1541:
   996                           
   997                           ; BSR set to: 0
   998   007C92  0100               	movlb	0	; force () banked
   999   007C94  4B7D               	infsnz	jouePendu@i_87& (0+255),f,b
  1000   007C96  2B7E               	incf	(jouePendu@i_87+1)& (0+255),f,b
  1001   007C98                     l1543:
  1002                           
  1003                           ; BSR set to: 0
  1004   007C98  0100               	movlb	0	; force () banked
  1005   007C9A  517F               	movf	jouePendu@longMess& (0+255),w,b
  1006   007C9C  0100               	movlb	0	; force () banked
  1007   007C9E  5D7D               	subwf	jouePendu@i_87& (0+255),w,b
  1008   007CA0  517E               	movf	(jouePendu@i_87+1)& (0+255),w,b
  1009   007CA2  0A80               	xorlw	128
  1010   007CA4  0100               	movlb	0	; force () banked
  1011   007CA6  6F67               	movwf	??_jouePendu& (0+255),b
  1012   007CA8  0100               	movlb	0	; force () banked
  1013   007CAA  5180               	movf	(jouePendu@longMess+1)& (0+255),w,b
  1014   007CAC  0A80               	xorlw	128
  1015   007CAE  0100               	movlb	0	; force () banked
  1016   007CB0  5967               	subwfb	??_jouePendu& (0+255),w,b
  1017   007CB2  A0D8               	btfss	status,0,c
  1018   007CB4  EF5E  F03E         	goto	u371
  1019   007CB8  EF60  F03E         	goto	u370
  1020   007CBC                     u371:
  1021   007CBC  EF2C  F03E         	goto	l1537
  1022   007CC0                     u370:
  1023   007CC0                     
  1024                           ; BSR set to: 0
  1025                           ;main.c: 104: };main.c: 105: };main.c: 106: for(int i = 0; i < longMess; i++)
  1026   007CC0  0E00               	movlw	0
  1027   007CC2  0100               	movlb	0	; force () banked
  1028   007CC4  6F82               	movwf	(jouePendu@i_88+1)& (0+255),b
  1029   007CC6  0E00               	movlw	0
  1030   007CC8  6F81               	movwf	jouePendu@i_88& (0+255),b
  1031   007CCA  EF8D  F03E         	goto	l1555
  1032   007CCE                     l1547:
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;main.c: 107: {;main.c: 108: if(trouve[i] == 1)
  1036   007CCE  0E68               	movlw	low jouePendu@trouve
  1037   007CD0  0100               	movlb	0	; force () banked
  1038   007CD2  2581               	addwf	jouePendu@i_88& (0+255),w,b
  1039   007CD4  6ED9               	movwf	fsr2l,c
  1040   007CD6  0E00               	movlw	high jouePendu@trouve
  1041   007CD8  2182               	addwfc	(jouePendu@i_88+1)& (0+255),w,b
  1042   007CDA  6EDA               	movwf	fsr2h,c
  1043   007CDC  04DE               	decf	postinc2,w,c
  1044   007CDE  A4D8               	btfss	status,2,c
  1045   007CE0  EF74  F03E         	goto	u381
  1046   007CE4  EF76  F03E         	goto	u380
  1047   007CE8                     u381:
  1048   007CE8  EF8A  F03E         	goto	l1553
  1049   007CEC                     u380:
  1050   007CEC                     
  1051                           ; BSR set to: 0
  1052                           ;main.c: 109: {;main.c: 111: lcd_gotoXY(i+1,1);
  1053   007CEC  0E01               	movlw	1
  1054   007CEE  0100               	movlb	0	; force () banked
  1055   007CF0  6F63               	movwf	lcd_gotoXY@y& (0+255),b
  1056   007CF2  0100               	movlb	0	; force () banked
  1057   007CF4  2981               	incf	jouePendu@i_88& (0+255),w,b
  1058   007CF6  EC56  F03D         	call	_lcd_gotoXY
  1059   007CFA                     
  1060                           ;main.c: 112: lcd_ecritChar(mot[i]);
  1061   007CFA  0100               	movlb	0	; force () banked
  1062   007CFC  5181               	movf	jouePendu@i_88& (0+255),w,b
  1063   007CFE  0100               	movlb	0	; force () banked
  1064   007D00  2565               	addwf	jouePendu@mot& (0+255),w,b
  1065   007D02  6ED9               	movwf	fsr2l,c
  1066   007D04  0100               	movlb	0	; force () banked
  1067   007D06  5182               	movf	(jouePendu@i_88+1)& (0+255),w,b
  1068   007D08  0100               	movlb	0	; force () banked
  1069   007D0A  2166               	addwfc	(jouePendu@mot+1)& (0+255),w,b
  1070   007D0C  6EDA               	movwf	fsr2h,c
  1071   007D0E  50DF               	movf	indf2,w,c
  1072   007D10  ECC1  F03C         	call	_lcd_ecritChar
  1073   007D14                     l1553:
  1074   007D14  0100               	movlb	0	; force () banked
  1075   007D16  4B81               	infsnz	jouePendu@i_88& (0+255),f,b
  1076   007D18  2B82               	incf	(jouePendu@i_88+1)& (0+255),f,b
  1077   007D1A                     l1555:
  1078                           
  1079                           ; BSR set to: 0
  1080   007D1A  0100               	movlb	0	; force () banked
  1081   007D1C  517F               	movf	jouePendu@longMess& (0+255),w,b
  1082   007D1E  0100               	movlb	0	; force () banked
  1083   007D20  5D81               	subwf	jouePendu@i_88& (0+255),w,b
  1084   007D22  5182               	movf	(jouePendu@i_88+1)& (0+255),w,b
  1085   007D24  0A80               	xorlw	128
  1086   007D26  0100               	movlb	0	; force () banked
  1087   007D28  6F67               	movwf	??_jouePendu& (0+255),b
  1088   007D2A  0100               	movlb	0	; force () banked
  1089   007D2C  5180               	movf	(jouePendu@longMess+1)& (0+255),w,b
  1090   007D2E  0A80               	xorlw	128
  1091   007D30  0100               	movlb	0	; force () banked
  1092   007D32  5967               	subwfb	??_jouePendu& (0+255),w,b
  1093   007D34  A0D8               	btfss	status,0,c
  1094   007D36  EF9F  F03E         	goto	u391
  1095   007D3A  EFA1  F03E         	goto	u390
  1096   007D3E                     u391:
  1097   007D3E  EF67  F03E         	goto	l1547
  1098   007D42                     u390:
  1099   007D42                     
  1100                           ; BSR set to: 0
  1101                           ;main.c: 114: };main.c: 115: };main.c: 117: for(int i = 0; i < longMess; i++)
  1102   007D42  0E00               	movlw	0
  1103   007D44  0100               	movlb	0	; force () banked
  1104   007D46  6F7C               	movwf	(jouePendu@i_89+1)& (0+255),b
  1105   007D48  0E00               	movlw	0
  1106   007D4A  6F7B               	movwf	jouePendu@i_89& (0+255),b
  1107   007D4C  EFC2  F03E         	goto	l1569
  1108   007D50                     l1559:
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;main.c: 118: {;main.c: 119: if(trouve[i] == 1)
  1112   007D50  0E68               	movlw	low jouePendu@trouve
  1113   007D52  0100               	movlb	0	; force () banked
  1114   007D54  257B               	addwf	jouePendu@i_89& (0+255),w,b
  1115   007D56  6ED9               	movwf	fsr2l,c
  1116   007D58  0E00               	movlw	high jouePendu@trouve
  1117   007D5A  217C               	addwfc	(jouePendu@i_89+1)& (0+255),w,b
  1118   007D5C  6EDA               	movwf	fsr2h,c
  1119   007D5E  04DE               	decf	postinc2,w,c
  1120   007D60  A4D8               	btfss	status,2,c
  1121   007D62  EFB5  F03E         	goto	u401
  1122   007D66  EFB7  F03E         	goto	u400
  1123   007D6A                     u401:
  1124   007D6A  EFBC  F03E         	goto	l1565
  1125   007D6E                     u400:
  1126   007D6E                     
  1127                           ; BSR set to: 0
  1128                           ;main.c: 120: {;main.c: 121: toutTrouver = 1;
  1129   007D6E  0E01               	movlw	1
  1130   007D70  0100               	movlb	0	; force () banked
  1131   007D72  6F78               	movwf	jouePendu@toutTrouver& (0+255),b
  1132                           
  1133                           ;main.c: 122: break;
  1134   007D74  EFD6  F03E         	goto	l1571
  1135   007D78                     l1565:
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;main.c: 124: else;main.c: 125: {;main.c: 126: toutTrouver = 0;
  1139   007D78  0E00               	movlw	0
  1140   007D7A  0100               	movlb	0	; force () banked
  1141   007D7C  6F78               	movwf	jouePendu@toutTrouver& (0+255),b
  1142   007D7E                     
  1143                           ; BSR set to: 0
  1144   007D7E  0100               	movlb	0	; force () banked
  1145   007D80  4B7B               	infsnz	jouePendu@i_89& (0+255),f,b
  1146   007D82  2B7C               	incf	(jouePendu@i_89+1)& (0+255),f,b
  1147   007D84                     l1569:
  1148                           
  1149                           ; BSR set to: 0
  1150   007D84  0100               	movlb	0	; force () banked
  1151   007D86  517F               	movf	jouePendu@longMess& (0+255),w,b
  1152   007D88  0100               	movlb	0	; force () banked
  1153   007D8A  5D7B               	subwf	jouePendu@i_89& (0+255),w,b
  1154   007D8C  517C               	movf	(jouePendu@i_89+1)& (0+255),w,b
  1155   007D8E  0A80               	xorlw	128
  1156   007D90  0100               	movlb	0	; force () banked
  1157   007D92  6F67               	movwf	??_jouePendu& (0+255),b
  1158   007D94  0100               	movlb	0	; force () banked
  1159   007D96  5180               	movf	(jouePendu@longMess+1)& (0+255),w,b
  1160   007D98  0A80               	xorlw	128
  1161   007D9A  0100               	movlb	0	; force () banked
  1162   007D9C  5967               	subwfb	??_jouePendu& (0+255),w,b
  1163   007D9E  A0D8               	btfss	status,0,c
  1164   007DA0  EFD4  F03E         	goto	u411
  1165   007DA4  EFD6  F03E         	goto	u410
  1166   007DA8                     u411:
  1167   007DA8  EFA8  F03E         	goto	l1559
  1168   007DAC                     u410:
  1169   007DAC                     l1571:
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;main.c: 127: };main.c: 129: };main.c: 131: };main.c: 132: };main.c: 134: while(toutTrou
      +                          ver);
  1173   007DAC  0100               	movlb	0	; force () banked
  1174   007DAE  5178               	movf	jouePendu@toutTrouver& (0+255),w,b
  1175   007DB0  A4D8               	btfss	status,2,c
  1176   007DB2  EFDD  F03E         	goto	u421
  1177   007DB6  EFDF  F03E         	goto	u420
  1178   007DBA                     u421:
  1179   007DBA  EF17  F03E         	goto	l1531
  1180   007DBE                     u420:
  1181   007DBE                     
  1182                           ; BSR set to: 0
  1183   007DBE  0012               	return		;funcret
  1184   007DC0                     __end_of_jouePendu:
  1185                           	callstack 0
  1186                           
  1187 ;; *************** function _strlen *****************
  1188 ;; Defined at:
  1189 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strlen.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  1192 ;;		 -> main@messages(45), 
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
  1195 ;;		 -> main@messages(45), 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  2    0[BANK0 ] unsigned int 
  1198 ;; Registers used:
  1199 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1205 ;;      Params:         0       2       0       0       0       0       0
  1206 ;;      Locals:         0       2       0       0       0       0       0
  1207 ;;      Temps:          0       0       0       0       0       0       0
  1208 ;;      Totals:         0       4       0       0       0       0       0
  1209 ;;Total ram usage:        4 bytes
  1210 ;; Hardware stack levels used: 1
  1211 ;; This function calls:
  1212 ;;		Nothing
  1213 ;; This function is called by:
  1214 ;;		_jouePendu
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text6
  1219   007880                     __ptext6:
  1220                           	callstack 0
  1221   007880                     _strlen:
  1222                           	callstack 29
  1223   007880  C060  F062         	movff	strlen@s,strlen@cp
  1224   007884  C061  F063         	movff	strlen@s+1,strlen@cp+1
  1225   007888  EF49  F03C         	goto	l1421
  1226   00788C                     l1419:
  1227   00788C  0100               	movlb	0	; () banked
  1228   00788E  4B62               	infsnz	strlen@cp& (0+255),f,b
  1229   007890  2B63               	incf	(strlen@cp+1)& (0+255),f,b
  1230   007892                     l1421:
  1231   007892  C062  FFD9         	movff	strlen@cp,fsr2l
  1232   007896  C063  FFDA         	movff	strlen@cp+1,fsr2h
  1233   00789A  50DF               	movf	indf2,w,c
  1234   00789C  A4D8               	btfss	status,2,c
  1235   00789E  EF53  F03C         	goto	u291
  1236   0078A2  EF55  F03C         	goto	u290
  1237   0078A6                     u291:
  1238   0078A6  EF46  F03C         	goto	l1419
  1239   0078AA                     u290:
  1240   0078AA  0100               	movlb	0	; () banked
  1241   0078AC  5160               	movf	strlen@s& (0+255),w,b
  1242   0078AE  5D62               	subwf	strlen@cp& (0+255),w,b
  1243   0078B0  6F60               	movwf	?_strlen& (0+255),b
  1244   0078B2  5161               	movf	(strlen@s+1)& (0+255),w,b
  1245   0078B4  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
  1246   0078B6  6F61               	movwf	(?_strlen+1)& (0+255),b
  1247   0078B8                     
  1248                           ; BSR set to: 0
  1249   0078B8  0012               	return		;funcret
  1250   0078BA                     __end_of_strlen:
  1251                           	callstack 0
  1252                           
  1253 ;; *************** function _lcd_gotoXY *****************
  1254 ;; Defined at:
  1255 ;;		line 314 in file "Lcd4Lignes.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  x               1    wreg     unsigned char 
  1258 ;;  y               1    3[BANK0 ] unsigned char 
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;  x               1    4[BANK0 ] unsigned char 
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      void 
  1263 ;; Registers used:
  1264 ;;		wreg, status,2, status,0, cstack
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1270 ;;      Params:         0       1       0       0       0       0       0
  1271 ;;      Locals:         0       1       0       0       0       0       0
  1272 ;;      Temps:          0       0       0       0       0       0       0
  1273 ;;      Totals:         0       2       0       0       0       0       0
  1274 ;;Total ram usage:        2 bytes
  1275 ;; Hardware stack levels used: 1
  1276 ;; Hardware stack levels required when called: 3
  1277 ;; This function calls:
  1278 ;;		_lcd_wrCom
  1279 ;; This function is called by:
  1280 ;;		_jouePendu
  1281 ;;		_lcd_effaceLigne
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text7
  1286   007AAC                     __ptext7:
  1287                           	callstack 0
  1288   007AAC                     _lcd_gotoXY:
  1289                           	callstack 26
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;incstack = 0
  1293                           ;lcd_gotoXY@x stored from wreg
  1294   007AAC  0100               	movlb	0	; force () banked
  1295   007AAE  6F64               	movwf	lcd_gotoXY@x& (0+255),b
  1296   007AB0                     
  1297                           ;Lcd4Lignes.c: 316: switch(y)
  1298   007AB0  EF7A  F03D         	goto	l1451
  1299   007AB4                     l1441:
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;Lcd4Lignes.c: 319: lcd_wrCom((x-1+0x80)|0x80);
  1303   007AB4  0100               	movlb	0	; force () banked
  1304   007AB6  5164               	movf	lcd_gotoXY@x& (0+255),w,b
  1305   007AB8  0F7F               	addlw	127
  1306   007ABA  0980               	iorlw	128
  1307   007ABC  EC20  F03D         	call	_lcd_wrCom
  1308                           
  1309                           ;Lcd4Lignes.c: 320: break;
  1310   007AC0  EF8E  F03D         	goto	l166
  1311   007AC4                     l1443:
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;Lcd4Lignes.c: 322: lcd_wrCom((x-1+0xC0)|0x80);
  1315   007AC4  0100               	movlb	0	; force () banked
  1316   007AC6  5164               	movf	lcd_gotoXY@x& (0+255),w,b
  1317   007AC8  0FBF               	addlw	191
  1318   007ACA  0980               	iorlw	128
  1319   007ACC  EC20  F03D         	call	_lcd_wrCom
  1320                           
  1321                           ;Lcd4Lignes.c: 323: break;
  1322   007AD0  EF8E  F03D         	goto	l166
  1323   007AD4                     l1445:
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;Lcd4Lignes.c: 325: lcd_wrCom((x-1+0x94)|0x80);
  1327   007AD4  0100               	movlb	0	; force () banked
  1328   007AD6  5164               	movf	lcd_gotoXY@x& (0+255),w,b
  1329   007AD8  0F93               	addlw	147
  1330   007ADA  0980               	iorlw	128
  1331   007ADC  EC20  F03D         	call	_lcd_wrCom
  1332                           
  1333                           ;Lcd4Lignes.c: 326: break;
  1334   007AE0  EF8E  F03D         	goto	l166
  1335   007AE4                     l1447:
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;Lcd4Lignes.c: 328: lcd_wrCom((x-1+0xD4)|0x80);
  1339   007AE4  0100               	movlb	0	; force () banked
  1340   007AE6  5164               	movf	lcd_gotoXY@x& (0+255),w,b
  1341   007AE8  0FD3               	addlw	211
  1342   007AEA  0980               	iorlw	128
  1343   007AEC  EC20  F03D         	call	_lcd_wrCom
  1344                           
  1345                           ;Lcd4Lignes.c: 329: break;
  1346   007AF0  EF8E  F03D         	goto	l166
  1347   007AF4                     l1451:
  1348   007AF4  0100               	movlb	0	; force () banked
  1349   007AF6  5163               	movf	lcd_gotoXY@y& (0+255),w,b
  1350                           
  1351                           ; Switch size 1, requested type "simple"
  1352                           ; Number of cases is 4, Range of values is 1 to 4
  1353                           ; switch strategies available:
  1354                           ; Name         Instructions Cycles
  1355                           ; simple_byte           13     7 (average)
  1356                           ;	Chosen strategy is simple_byte
  1357   007AF8  0A01               	xorlw	1	; case 1
  1358   007AFA  B4D8               	btfsc	status,2,c
  1359   007AFC  EF5A  F03D         	goto	l1441
  1360   007B00  0A03               	xorlw	3	; case 2
  1361   007B02  B4D8               	btfsc	status,2,c
  1362   007B04  EF62  F03D         	goto	l1443
  1363   007B08  0A01               	xorlw	1	; case 3
  1364   007B0A  B4D8               	btfsc	status,2,c
  1365   007B0C  EF6A  F03D         	goto	l1445
  1366   007B10  0A07               	xorlw	7	; case 4
  1367   007B12  B4D8               	btfsc	status,2,c
  1368   007B14  EF72  F03D         	goto	l1447
  1369   007B18  EF8E  F03D         	goto	l166
  1370   007B1C                     l166:
  1371   007B1C  0012               	return		;funcret
  1372   007B1E                     __end_of_lcd_gotoXY:
  1373                           	callstack 0
  1374                           
  1375 ;; *************** function _lcd_ecritChar *****************
  1376 ;; Defined at:
  1377 ;;		line 359 in file "Lcd4Lignes.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;  car             1    wreg     unsigned char 
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  car             1    3[BANK0 ] unsigned char 
  1382 ;;  posRam          1    4[BANK0 ] unsigned char 
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  1    wreg      void 
  1385 ;; Registers used:
  1386 ;;		wreg, status,2, status,0, cstack
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1392 ;;      Params:         0       0       0       0       0       0       0
  1393 ;;      Locals:         0       2       0       0       0       0       0
  1394 ;;      Temps:          0       0       0       0       0       0       0
  1395 ;;      Totals:         0       2       0       0       0       0       0
  1396 ;;Total ram usage:        2 bytes
  1397 ;; Hardware stack levels used: 1
  1398 ;; Hardware stack levels required when called: 3
  1399 ;; This function calls:
  1400 ;;		_lcd_wrCom
  1401 ;;		_lcd_wrData
  1402 ;; This function is called by:
  1403 ;;		_jouePendu
  1404 ;;		_lcd_putMessage
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text8
  1409   007982                     __ptext8:
  1410                           	callstack 0
  1411   007982                     _lcd_ecritChar:
  1412                           	callstack 26
  1413                           
  1414                           ;incstack = 0
  1415                           ;lcd_ecritChar@car stored from wreg
  1416   007982  0100               	movlb	0	; force () banked
  1417   007984  6F63               	movwf	lcd_ecritChar@car& (0+255),b
  1418   007986                     
  1419                           ;Lcd4Lignes.c: 361: unsigned char posRam;;Lcd4Lignes.c: 363: posRam = lcd_wrData(car);
  1420   007986  0100               	movlb	0	; force () banked
  1421   007988  5163               	movf	lcd_ecritChar@car& (0+255),w,b
  1422   00798A  EC26  F03C         	call	_lcd_wrData
  1423   00798E  0100               	movlb	0	; force () banked
  1424   007990  6F64               	movwf	lcd_ecritChar@posRam& (0+255),b
  1425                           
  1426                           ;Lcd4Lignes.c: 364: switch(posRam)
  1427   007992  EFDA  F03C         	goto	l1437
  1428   007996                     l1429:
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;Lcd4Lignes.c: 367: lcd_wrCom(0xC0|0x80);
  1432   007996  0EC0               	movlw	192
  1433   007998  EC20  F03D         	call	_lcd_wrCom
  1434                           
  1435                           ;Lcd4Lignes.c: 368: break;
  1436   00799C  EFEA  F03C         	goto	l177
  1437   0079A0                     l1431:
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;Lcd4Lignes.c: 370: lcd_wrCom(0x94|0x80);
  1441   0079A0  0E94               	movlw	148
  1442   0079A2  EC20  F03D         	call	_lcd_wrCom
  1443                           
  1444                           ;Lcd4Lignes.c: 371: break;
  1445   0079A6  EFEA  F03C         	goto	l177
  1446   0079AA                     l1433:
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;Lcd4Lignes.c: 373: lcd_wrCom(0xD4|0x80);
  1450   0079AA  0ED4               	movlw	212
  1451   0079AC  EC20  F03D         	call	_lcd_wrCom
  1452                           
  1453                           ;Lcd4Lignes.c: 374: break;
  1454   0079B0  EFEA  F03C         	goto	l177
  1455   0079B4                     l1437:
  1456                           
  1457                           ; BSR set to: 0
  1458   0079B4  0100               	movlb	0	; force () banked
  1459   0079B6  5164               	movf	lcd_ecritChar@posRam& (0+255),w,b
  1460                           
  1461                           ; Switch size 1, requested type "simple"
  1462                           ; Number of cases is 3, Range of values is 148 to 212
  1463                           ; switch strategies available:
  1464                           ; Name         Instructions Cycles
  1465                           ; simple_byte           10     6 (average)
  1466                           ;	Chosen strategy is simple_byte
  1467   0079B8  0A94               	xorlw	148	; case 148
  1468   0079BA  B4D8               	btfsc	status,2,c
  1469   0079BC  EFCB  F03C         	goto	l1429
  1470   0079C0  0A54               	xorlw	84	; case 192
  1471   0079C2  B4D8               	btfsc	status,2,c
  1472   0079C4  EFD5  F03C         	goto	l1433
  1473   0079C8  0A14               	xorlw	20	; case 212
  1474   0079CA  B4D8               	btfsc	status,2,c
  1475   0079CC  EFD0  F03C         	goto	l1431
  1476   0079D0  EFEA  F03C         	goto	l177
  1477   0079D4                     l177:
  1478   0079D4  0012               	return		;funcret
  1479   0079D6                     __end_of_lcd_ecritChar:
  1480                           	callstack 0
  1481                           
  1482 ;; *************** function _lcd_wrData *****************
  1483 ;; Defined at:
  1484 ;;		line 188 in file "Lcd4Lignes.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;  caractere       1    wreg     unsigned char 
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;  caractere       1    2[BANK0 ] unsigned char 
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  1    wreg      unsigned char 
  1491 ;; Registers used:
  1492 ;;		wreg, status,2, status,0, cstack
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1498 ;;      Params:         0       0       0       0       0       0       0
  1499 ;;      Locals:         0       1       0       0       0       0       0
  1500 ;;      Temps:          0       0       0       0       0       0       0
  1501 ;;      Totals:         0       1       0       0       0       0       0
  1502 ;;Total ram usage:        1 bytes
  1503 ;; Hardware stack levels used: 1
  1504 ;; Hardware stack levels required when called: 2
  1505 ;; This function calls:
  1506 ;;		_lcd_busy
  1507 ;;		_lcd_ecrireDonnees
  1508 ;;		_lcd_strobeEnableBit
  1509 ;; This function is called by:
  1510 ;;		_lcd_ecritChar
  1511 ;;		_lcd_initCGRam
  1512 ;;		_lcd_effaceChar
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           	psect	text9
  1517   00784C                     __ptext9:
  1518                           	callstack 0
  1519   00784C                     _lcd_wrData:
  1520                           	callstack 26
  1521                           
  1522                           ;incstack = 0
  1523                           ;lcd_wrData@caractere stored from wreg
  1524   00784C  0100               	movlb	0	; force () banked
  1525   00784E  6F62               	movwf	lcd_wrData@caractere& (0+255),b
  1526   007850                     
  1527                           ;Lcd4Lignes.c: 190: lcd_busy();
  1528   007850  EC7D  F03C         	call	_lcd_busy	;wreg free
  1529   007854                     
  1530                           ;Lcd4Lignes.c: 191: TRISD = 0b00000000;
  1531   007854  0E00               	movlw	0
  1532   007856  6E95               	movwf	149,c	;volatile
  1533   007858                     
  1534                           ;Lcd4Lignes.c: 194: PORTAbits.RA0 = 1;
  1535   007858  8080               	bsf	128,0,c	;volatile
  1536   00785A                     
  1537                           ;Lcd4Lignes.c: 195: PORTAbits.RA1 = 0;
  1538   00785A  9280               	bcf	128,1,c	;volatile
  1539   00785C                     
  1540                           ;Lcd4Lignes.c: 197: lcd_ecrireDonnees(caractere >> 4);
  1541   00785C  0100               	movlb	0	; force () banked
  1542   00785E  3962               	swapf	lcd_wrData@caractere& (0+255),w,b
  1543   007860  0B0F               	andlw	15
  1544   007862  ECC6  F03B         	call	_lcd_ecrireDonnees
  1545   007866                     
  1546                           ;Lcd4Lignes.c: 198: lcd_strobeEnableBit();
  1547   007866  EC9F  F03B         	call	_lcd_strobeEnableBit	;wreg free
  1548   00786A                     
  1549                           ;Lcd4Lignes.c: 201: lcd_ecrireDonnees(caractere);
  1550   00786A  0100               	movlb	0	; force () banked
  1551   00786C  5162               	movf	lcd_wrData@caractere& (0+255),w,b
  1552   00786E  ECC6  F03B         	call	_lcd_ecrireDonnees
  1553   007872                     
  1554                           ;Lcd4Lignes.c: 202: lcd_strobeEnableBit();
  1555   007872  EC9F  F03B         	call	_lcd_strobeEnableBit	;wreg free
  1556   007876                     
  1557                           ;Lcd4Lignes.c: 205: TRISD = 0b00001111;
  1558   007876  0E0F               	movlw	15
  1559   007878  6E95               	movwf	149,c	;volatile
  1560   00787A                     
  1561                           ;Lcd4Lignes.c: 206: _delay((unsigned long)((2)*(1000000/4000000.0)));
  1562                           ;Lcd4Lignes.c: 207: return(lcd_busy());
  1563   00787A  EC7D  F03C         	call	_lcd_busy	;wreg free
  1564   00787E  0012               	return		;funcret
  1565   007880                     __end_of_lcd_wrData:
  1566                           	callstack 0
  1567                           
  1568 ;; *************** function _lcd_wrCom *****************
  1569 ;; Defined at:
  1570 ;;		line 156 in file "Lcd4Lignes.c"
  1571 ;; Parameters:    Size  Location     Type
  1572 ;;  commande        1    wreg     unsigned char 
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;  commande        1    2[BANK0 ] unsigned char 
  1575 ;; Return value:  Size  Location     Type
  1576 ;;                  1    wreg      unsigned char 
  1577 ;; Registers used:
  1578 ;;		wreg, status,2, status,0, cstack
  1579 ;; Tracked objects:
  1580 ;;		On entry : 0/0
  1581 ;;		On exit  : 0/0
  1582 ;;		Unchanged: 0/0
  1583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1584 ;;      Params:         0       0       0       0       0       0       0
  1585 ;;      Locals:         0       1       0       0       0       0       0
  1586 ;;      Temps:          0       0       0       0       0       0       0
  1587 ;;      Totals:         0       1       0       0       0       0       0
  1588 ;;Total ram usage:        1 bytes
  1589 ;; Hardware stack levels used: 1
  1590 ;; Hardware stack levels required when called: 2
  1591 ;; This function calls:
  1592 ;;		_lcd_busy
  1593 ;;		_lcd_ecrireDonnees
  1594 ;;		_lcd_strobeEnableBit
  1595 ;; This function is called by:
  1596 ;;		_lcd_init
  1597 ;;		_lcd_curseurHome
  1598 ;;		_lcd_gotoXY
  1599 ;;		_lcd_ecritChar
  1600 ;;		_lcd_initCGRam
  1601 ;;		_lcd_effaceAffichage
  1602 ;;		_lcd_cacheCurseur
  1603 ;;		_lcd_montreCurseur
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text10
  1608   007A40                     __ptext10:
  1609                           	callstack 0
  1610   007A40                     _lcd_wrCom:
  1611                           	callstack 27
  1612                           
  1613                           ;incstack = 0
  1614                           ;lcd_wrCom@commande stored from wreg
  1615   007A40  0100               	movlb	0	; force () banked
  1616   007A42  6F62               	movwf	lcd_wrCom@commande& (0+255),b
  1617   007A44                     
  1618                           ;Lcd4Lignes.c: 158: lcd_busy();
  1619   007A44  EC7D  F03C         	call	_lcd_busy	;wreg free
  1620   007A48                     
  1621                           ;Lcd4Lignes.c: 160: TRISD = 0b00000000;
  1622   007A48  0E00               	movlw	0
  1623   007A4A  6E95               	movwf	149,c	;volatile
  1624   007A4C                     
  1625                           ;Lcd4Lignes.c: 163: PORTAbits.RA0 = 0;
  1626   007A4C  9080               	bcf	128,0,c	;volatile
  1627   007A4E                     
  1628                           ;Lcd4Lignes.c: 164: PORTAbits.RA1 = 0;
  1629   007A4E  9280               	bcf	128,1,c	;volatile
  1630   007A50                     
  1631                           ;Lcd4Lignes.c: 166: lcd_ecrireDonnees(commande >> 4);
  1632   007A50  0100               	movlb	0	; force () banked
  1633   007A52  3962               	swapf	lcd_wrCom@commande& (0+255),w,b
  1634   007A54  0B0F               	andlw	15
  1635   007A56  ECC6  F03B         	call	_lcd_ecrireDonnees
  1636   007A5A                     
  1637                           ;Lcd4Lignes.c: 167: lcd_strobeEnableBit();
  1638   007A5A  EC9F  F03B         	call	_lcd_strobeEnableBit	;wreg free
  1639   007A5E                     
  1640                           ;Lcd4Lignes.c: 170: lcd_ecrireDonnees(commande);
  1641   007A5E  0100               	movlb	0	; force () banked
  1642   007A60  5162               	movf	lcd_wrCom@commande& (0+255),w,b
  1643   007A62  ECC6  F03B         	call	_lcd_ecrireDonnees
  1644   007A66                     
  1645                           ;Lcd4Lignes.c: 171: lcd_strobeEnableBit();
  1646   007A66  EC9F  F03B         	call	_lcd_strobeEnableBit	;wreg free
  1647   007A6A                     
  1648                           ;Lcd4Lignes.c: 172: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1649   007A6A  0E03               	movlw	3
  1650   007A6C                     u517:
  1651   007A6C  2EE8               	decfsz	wreg,f,c
  1652   007A6E  D7FE               	bra	u517
  1653   007A70  F000               	nop	
  1654   007A72                     
  1655                           ;Lcd4Lignes.c: 174: if ((commande == 0x01) || commande == 0x02)
  1656   007A72  0100               	movlb	0	; force () banked
  1657   007A74  0562               	decf	lcd_wrCom@commande& (0+255),w,b
  1658   007A76  B4D8               	btfsc	status,2,c
  1659   007A78  EF40  F03D         	goto	u271
  1660   007A7C  EF42  F03D         	goto	u270
  1661   007A80                     u271:
  1662   007A80  EF4C  F03D         	goto	l1377
  1663   007A84                     u270:
  1664   007A84                     
  1665                           ; BSR set to: 0
  1666   007A84  0E02               	movlw	2
  1667   007A86  0100               	movlb	0	; force () banked
  1668   007A88  1962               	xorwf	lcd_wrCom@commande& (0+255),w,b
  1669   007A8A  A4D8               	btfss	status,2,c
  1670   007A8C  EF4A  F03D         	goto	u281
  1671   007A90  EF4C  F03D         	goto	u280
  1672   007A94                     u281:
  1673   007A94  EF51  F03D         	goto	l1379
  1674   007A98                     u280:
  1675   007A98                     l1377:
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;Lcd4Lignes.c: 175: _delay((unsigned long)((2)*(1000000/4000.0)));
  1679   007A98  0EA6               	movlw	166
  1680   007A9A                     u527:
  1681   007A9A  2EE8               	decfsz	wreg,f,c
  1682   007A9C  D7FE               	bra	u527
  1683   007A9E  F000 F000          	nop2	
  1684   007AA2                     l1379:
  1685                           
  1686                           ;Lcd4Lignes.c: 177: TRISD = 0b00001111;
  1687   007AA2  0E0F               	movlw	15
  1688   007AA4  6E95               	movwf	149,c	;volatile
  1689   007AA6                     
  1690                           ;Lcd4Lignes.c: 179: return(lcd_busy());
  1691   007AA6  EC7D  F03C         	call	_lcd_busy	;wreg free
  1692   007AAA  0012               	return		;funcret
  1693   007AAC                     __end_of_lcd_wrCom:
  1694                           	callstack 0
  1695                           
  1696 ;; *************** function _lcd_strobeEnableBit *****************
  1697 ;; Defined at:
  1698 ;;		line 431 in file "Lcd4Lignes.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;		None
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;		None
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		None
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1712 ;;      Params:         0       0       0       0       0       0       0
  1713 ;;      Locals:         0       0       0       0       0       0       0
  1714 ;;      Temps:          0       0       0       0       0       0       0
  1715 ;;      Totals:         0       0       0       0       0       0       0
  1716 ;;Total ram usage:        0 bytes
  1717 ;; Hardware stack levels used: 1
  1718 ;; This function calls:
  1719 ;;		Nothing
  1720 ;; This function is called by:
  1721 ;;		_lcd_wrCom
  1722 ;;		_lcd_wrData
  1723 ;;		_lcd_resetSequence
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           	psect	text11
  1728   00773E                     __ptext11:
  1729                           	callstack 0
  1730   00773E                     _lcd_strobeEnableBit:
  1731                           	callstack 28
  1732   00773E                     
  1733                           ;Lcd4Lignes.c: 433: PORTAbits.RA2 = 1;
  1734   00773E  8480               	bsf	128,2,c	;volatile
  1735                           
  1736                           ;Lcd4Lignes.c: 434: __nop();
  1737   007740  F000               	nop	
  1738                           
  1739                           ;Lcd4Lignes.c: 435: PORTAbits.RA2 = 0;
  1740   007742  9480               	bcf	128,2,c	;volatile
  1741   007744  0012               	return		;funcret
  1742   007746                     __end_of_lcd_strobeEnableBit:
  1743                           	callstack 0
  1744                           
  1745 ;; *************** function _lcd_ecrireDonnees *****************
  1746 ;; Defined at:
  1747 ;;		line 107 in file "Lcd4Lignes.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;  donnee          1    wreg     unsigned char 
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  donnee          1    1[BANK0 ] unsigned char 
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		wreg, status,2, status,0
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1761 ;;      Params:         0       0       0       0       0       0       0
  1762 ;;      Locals:         0       1       0       0       0       0       0
  1763 ;;      Temps:          0       1       0       0       0       0       0
  1764 ;;      Totals:         0       2       0       0       0       0       0
  1765 ;;Total ram usage:        2 bytes
  1766 ;; Hardware stack levels used: 1
  1767 ;; This function calls:
  1768 ;;		Nothing
  1769 ;; This function is called by:
  1770 ;;		_lcd_wrCom
  1771 ;;		_lcd_wrData
  1772 ;;		_lcd_resetSequence
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text12
  1777   00778C                     __ptext12:
  1778                           	callstack 0
  1779   00778C                     _lcd_ecrireDonnees:
  1780                           	callstack 28
  1781                           
  1782                           ;incstack = 0
  1783                           ;lcd_ecrireDonnees@donnee stored from wreg
  1784   00778C  0100               	movlb	0	; force () banked
  1785   00778E  6F61               	movwf	lcd_ecrireDonnees@donnee& (0+255),b
  1786   007790                     
  1787                           ;Lcd4Lignes.c: 110: PORTD = (donnee & 0x0F) | (PORTD & 0xF0);
  1788   007790  CF83 F060          	movff	3971,??_lcd_ecrireDonnees	;volatile
  1789   007794  0EF0               	movlw	240
  1790   007796  0100               	movlb	0	; force () banked
  1791   007798  1760               	andwf	??_lcd_ecrireDonnees& (0+255),f,b
  1792   00779A  0100               	movlb	0	; force () banked
  1793   00779C  5161               	movf	lcd_ecrireDonnees@donnee& (0+255),w,b
  1794   00779E  0B0F               	andlw	15
  1795   0077A0  0100               	movlb	0	; force () banked
  1796   0077A2  1160               	iorwf	??_lcd_ecrireDonnees& (0+255),w,b
  1797   0077A4  6E83               	movwf	131,c	;volatile
  1798   0077A6                     
  1799                           ; BSR set to: 0
  1800   0077A6  0012               	return		;funcret
  1801   0077A8                     __end_of_lcd_ecrireDonnees:
  1802                           	callstack 0
  1803                           
  1804 ;; *************** function _lcd_busy *****************
  1805 ;; Defined at:
  1806 ;;		line 124 in file "Lcd4Lignes.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;		None
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  adresse         1    1[BANK0 ] unsigned char 
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  1    wreg      unsigned char 
  1813 ;; Registers used:
  1814 ;;		wreg, status,2, status,0, cstack
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1820 ;;      Params:         0       0       0       0       0       0       0
  1821 ;;      Locals:         0       1       0       0       0       0       0
  1822 ;;      Temps:          0       1       0       0       0       0       0
  1823 ;;      Totals:         0       2       0       0       0       0       0
  1824 ;;Total ram usage:        2 bytes
  1825 ;; Hardware stack levels used: 1
  1826 ;; Hardware stack levels required when called: 1
  1827 ;; This function calls:
  1828 ;;		_lcd_lireDonnees
  1829 ;; This function is called by:
  1830 ;;		_lcd_wrCom
  1831 ;;		_lcd_wrData
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text13
  1836   0078FA                     __ptext13:
  1837                           	callstack 0
  1838   0078FA                     _lcd_busy:
  1839                           	callstack 27
  1840   0078FA                     
  1841                           ;Lcd4Lignes.c: 126: unsigned char adresse;;Lcd4Lignes.c: 128: PORTAbits.RA0 = 0;
  1842   0078FA  9080               	bcf	128,0,c	;volatile
  1843                           
  1844                           ;Lcd4Lignes.c: 129: PORTAbits.RA1 = 1;
  1845   0078FC  8280               	bsf	128,1,c	;volatile
  1846   0078FE                     l128:
  1847                           
  1848                           ;Lcd4Lignes.c: 132: {;Lcd4Lignes.c: 133: PORTAbits.RA2 = 1;
  1849   0078FE  8480               	bsf	128,2,c	;volatile
  1850                           
  1851                           ;Lcd4Lignes.c: 134: __nop();
  1852   007900  F000               	nop	
  1853   007902                     
  1854                           ;Lcd4Lignes.c: 135: adresse = lcd_lireDonnees() << 4;
  1855   007902  EC9C  F03B         	call	_lcd_lireDonnees	;wreg free
  1856   007906  0100               	movlb	0	; force () banked
  1857   007908  6F60               	movwf	??_lcd_busy& (0+255),b
  1858   00790A  3960               	swapf	??_lcd_busy& (0+255),w,b
  1859   00790C  0BF0               	andlw	240
  1860   00790E  0100               	movlb	0	; force () banked
  1861   007910  6F61               	movwf	lcd_busy@adresse& (0+255),b
  1862   007912                     
  1863                           ; BSR set to: 0
  1864                           ;Lcd4Lignes.c: 136: PORTAbits.RA2 = 0;
  1865   007912  9480               	bcf	128,2,c	;volatile
  1866   007914                     
  1867                           ;Lcd4Lignes.c: 138: PORTAbits.RA2 = 1;
  1868   007914  8480               	bsf	128,2,c	;volatile
  1869   007916                     
  1870                           ;Lcd4Lignes.c: 139: __nop();
  1871   007916  F000               	nop	
  1872                           
  1873                           ;Lcd4Lignes.c: 140: adresse |= lcd_lireDonnees();
  1874   007918  EC9C  F03B         	call	_lcd_lireDonnees	;wreg free
  1875   00791C  0100               	movlb	0	; force () banked
  1876   00791E  1361               	iorwf	lcd_busy@adresse& (0+255),f,b
  1877   007920                     
  1878                           ; BSR set to: 0
  1879                           ;Lcd4Lignes.c: 141: PORTAbits.RA2 = 0;
  1880   007920  9480               	bcf	128,2,c	;volatile
  1881   007922                     
  1882                           ;Lcd4Lignes.c: 143: };Lcd4Lignes.c: 144: while(adresse&0x80);
  1883   007922  0100               	movlb	0	; force () banked
  1884   007924  BF61               	btfsc	lcd_busy@adresse& (0+255),7,b
  1885   007926  EF97  F03C         	goto	u261
  1886   00792A  EF99  F03C         	goto	u260
  1887   00792E                     u261:
  1888   00792E  EF7F  F03C         	goto	l128
  1889   007932                     u260:
  1890   007932                     
  1891                           ; BSR set to: 0
  1892                           ;Lcd4Lignes.c: 146: PORTAbits.RA1 = 0;
  1893   007932  9280               	bcf	128,1,c	;volatile
  1894   007934                     
  1895                           ; BSR set to: 0
  1896                           ;Lcd4Lignes.c: 147: return(adresse&0x7f);
  1897   007934  0100               	movlb	0	; force () banked
  1898   007936  5161               	movf	lcd_busy@adresse& (0+255),w,b
  1899   007938  0B7F               	andlw	127
  1900   00793A                     
  1901                           ; BSR set to: 0
  1902   00793A  0012               	return		;funcret
  1903   00793C                     __end_of_lcd_busy:
  1904                           	callstack 0
  1905                           
  1906 ;; *************** function _lcd_lireDonnees *****************
  1907 ;; Defined at:
  1908 ;;		line 93 in file "Lcd4Lignes.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      unsigned char 
  1915 ;; Registers used:
  1916 ;;		wreg, status,2, status,0
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1922 ;;      Params:         0       0       0       0       0       0       0
  1923 ;;      Locals:         0       0       0       0       0       0       0
  1924 ;;      Temps:          0       0       0       0       0       0       0
  1925 ;;      Totals:         0       0       0       0       0       0       0
  1926 ;;Total ram usage:        0 bytes
  1927 ;; Hardware stack levels used: 1
  1928 ;; This function calls:
  1929 ;;		Nothing
  1930 ;; This function is called by:
  1931 ;;		_lcd_busy
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text14
  1936   007738                     __ptext14:
  1937                           	callstack 0
  1938   007738                     _lcd_lireDonnees:
  1939                           	callstack 27
  1940   007738                     
  1941                           ;Lcd4Lignes.c: 96: return (PORTD & 0x0f);
  1942   007738  5083               	movf	131,w,c	;volatile
  1943   00773A  0B0F               	andlw	15
  1944   00773C  0012               	return		;funcret
  1945   00773E                     __end_of_lcd_lireDonnees:
  1946                           	callstack 0
  1947                           
  1948 ;; *************** function _kbhit *****************
  1949 ;; Defined at:
  1950 ;;		line 99 in file "serie.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;		None               void
  1957 ;; Registers used:
  1958 ;;		status,0
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1964 ;;      Params:         0       0       0       0       0       0       0
  1965 ;;      Locals:         0       0       0       0       0       0       0
  1966 ;;      Temps:          0       0       0       0       0       0       0
  1967 ;;      Totals:         0       0       0       0       0       0       0
  1968 ;;Total ram usage:        0 bytes
  1969 ;; Hardware stack levels used: 1
  1970 ;; This function calls:
  1971 ;;		Nothing
  1972 ;; This function is called by:
  1973 ;;		_jouePendu
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	text15
  1978   007774                     __ptext15:
  1979                           	callstack 0
  1980   007774                     _kbhit:
  1981                           	callstack 29
  1982   007774                     
  1983                           ;serie.c: 101: return RCIF;
  1984   007774  BA9E               	btfsc	158,5,c	;volatile
  1985   007776  EFBF  F03B         	goto	u51
  1986   00777A  EFC1  F03B         	goto	u50
  1987   00777E                     u51:
  1988   00777E  EFC4  F03B         	goto	l1115
  1989   007782                     u50:
  1990   007782  90D8               	bcf	status,0,c
  1991   007784  EFC5  F03B         	goto	l103
  1992   007788                     l1115:
  1993   007788  80D8               	bsf	status,0,c
  1994   00778A                     l103:
  1995   00778A  0012               	return		;funcret
  1996   00778C                     __end_of_kbhit:
  1997                           	callstack 0
  1998                           
  1999 ;; *************** function _getch *****************
  2000 ;; Defined at:
  2001 ;;		line 65 in file "serie.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;		None
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  c               1    0[BANK0 ] unsigned char 
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  1    wreg      unsigned char 
  2008 ;; Registers used:
  2009 ;;		wreg, status,2
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2015 ;;      Params:         0       0       0       0       0       0       0
  2016 ;;      Locals:         0       1       0       0       0       0       0
  2017 ;;      Temps:          0       0       0       0       0       0       0
  2018 ;;      Totals:         0       1       0       0       0       0       0
  2019 ;;Total ram usage:        1 bytes
  2020 ;; Hardware stack levels used: 1
  2021 ;; This function calls:
  2022 ;;		Nothing
  2023 ;; This function is called by:
  2024 ;;		_jouePendu
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           	psect	text16
  2029   00775C                     __ptext16:
  2030                           	callstack 0
  2031   00775C                     _getch:
  2032                           	callstack 29
  2033   00775C                     l88:
  2034   00775C  AA9E               	btfss	158,5,c	;volatile
  2035   00775E  EFB3  F03B         	goto	u61
  2036   007762  EFB5  F03B         	goto	u60
  2037   007766                     u61:
  2038   007766  EFAE  F03B         	goto	l88
  2039   00776A                     u60:
  2040   00776A                     
  2041                           ;serie.c: 71: c = RCREG;
  2042   00776A  CFAE F060          	movff	4014,getch@c	;volatile
  2043   00776E                     
  2044                           ;serie.c: 73: return c;
  2045   00776E  0100               	movlb	0	; force () banked
  2046   007770  5160               	movf	getch@c& (0+255),w,b
  2047   007772                     
  2048                           ; BSR set to: 0
  2049   007772  0012               	return		;funcret
  2050   007774                     __end_of_getch:
  2051                           	callstack 0
  2052                           
  2053 ;; *************** function _initialisation *****************
  2054 ;; Defined at:
  2055 ;;		line 49 in file "main.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg, status,2
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2069 ;;      Params:         0       0       0       0       0       0       0
  2070 ;;      Locals:         0       0       0       0       0       0       0
  2071 ;;      Temps:          0       0       0       0       0       0       0
  2072 ;;      Totals:         0       0       0       0       0       0       0
  2073 ;;Total ram usage:        0 bytes
  2074 ;; Hardware stack levels used: 1
  2075 ;; This function calls:
  2076 ;;		Nothing
  2077 ;; This function is called by:
  2078 ;;		_main
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text17
  2083   00774E                     __ptext17:
  2084                           	callstack 0
  2085   00774E                     _initialisation:
  2086                           	callstack 30
  2087   00774E                     
  2088                           ;main.c: 51: TRISA = 0;
  2089   00774E  0E00               	movlw	0
  2090   007750  6E92               	movwf	146,c	;volatile
  2091                           
  2092                           ;main.c: 52: TRISB = 0;
  2093   007752  0E00               	movlw	0
  2094   007754  6E93               	movwf	147,c	;volatile
  2095                           
  2096                           ;main.c: 55: ANSEL = 0;
  2097   007756  0E00               	movlw	0
  2098   007758  6E7E               	movwf	126,c	;volatile
  2099   00775A  0012               	return		;funcret
  2100   00775C                     __end_of_initialisation:
  2101                           	callstack 0
  2102                           
  2103 ;; *************** function _init_serie *****************
  2104 ;; Defined at:
  2105 ;;		line 24 in file "serie.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;		None
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2119 ;;      Params:         0       0       0       0       0       0       0
  2120 ;;      Locals:         0       0       0       0       0       0       0
  2121 ;;      Temps:          0       0       0       0       0       0       0
  2122 ;;      Totals:         0       0       0       0       0       0       0
  2123 ;;Total ram usage:        0 bytes
  2124 ;; Hardware stack levels used: 1
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text18
  2133   0077A8                     __ptext18:
  2134                           	callstack 0
  2135   0077A8                     _init_serie:
  2136                           	callstack 30
  2137   0077A8                     
  2138                           ;serie.c: 27: TRISCbits.TRISC7=1;
  2139   0077A8  8E94               	bsf	148,7,c	;volatile
  2140                           
  2141                           ;serie.c: 28: TRISCbits.TRISC6=1;
  2142   0077AA  8C94               	bsf	148,6,c	;volatile
  2143   0077AC                     
  2144                           ;serie.c: 32: SPBRGH=0x00;
  2145   0077AC  0E00               	movlw	0
  2146   0077AE  6EB0               	movwf	176,c	;volatile
  2147                           
  2148                           ;serie.c: 33: SPBRG=25;
  2149   0077B0  0E19               	movlw	25
  2150   0077B2  6EAF               	movwf	175,c	;volatile
  2151   0077B4                     
  2152                           ;serie.c: 34: BAUDCONbits.BRG16=1;
  2153   0077B4  86B8               	bsf	184,3,c	;volatile
  2154   0077B6                     
  2155                           ;serie.c: 35: TXSTAbits.BRGH=1;
  2156   0077B6  84AC               	bsf	172,2,c	;volatile
  2157   0077B8                     
  2158                           ;serie.c: 38: TXSTAbits.SYNC=0;
  2159   0077B8  98AC               	bcf	172,4,c	;volatile
  2160   0077BA                     
  2161                           ;serie.c: 39: TXSTAbits.TXEN=1;
  2162   0077BA  8AAC               	bsf	172,5,c	;volatile
  2163   0077BC                     
  2164                           ;serie.c: 40: RCSTAbits.CREN = 1;
  2165   0077BC  88AB               	bsf	171,4,c	;volatile
  2166   0077BE                     
  2167                           ;serie.c: 41: RCSTAbits.SPEN=1;
  2168   0077BE  8EAB               	bsf	171,7,c	;volatile
  2169                           
  2170                           ;serie.c: 42: ANSEL = 0;
  2171   0077C0  0E00               	movlw	0
  2172   0077C2  6E7E               	movwf	126,c	;volatile
  2173   0077C4  0012               	return		;funcret
  2174   0077C6                     __end_of_init_serie:
  2175                           	callstack 0
  2176   000000                     
  2177                           	psect	param0
  2178   000000                     
  2179                           	psect	idloc
  2180                           
  2181                           ;Config register IDLOC0 @ 0x200000
  2182                           ;	unspecified, using default values
  2183   200000                     	org	2097152
  2184   200000  FF                 	db	255
  2185                           
  2186                           ;Config register IDLOC1 @ 0x200001
  2187                           ;	unspecified, using default values
  2188   200001                     	org	2097153
  2189   200001  FF                 	db	255
  2190                           
  2191                           ;Config register IDLOC2 @ 0x200002
  2192                           ;	unspecified, using default values
  2193   200002                     	org	2097154
  2194   200002  FF                 	db	255
  2195                           
  2196                           ;Config register IDLOC3 @ 0x200003
  2197                           ;	unspecified, using default values
  2198   200003                     	org	2097155
  2199   200003  FF                 	db	255
  2200                           
  2201                           ;Config register IDLOC4 @ 0x200004
  2202                           ;	unspecified, using default values
  2203   200004                     	org	2097156
  2204   200004  FF                 	db	255
  2205                           
  2206                           ;Config register IDLOC5 @ 0x200005
  2207                           ;	unspecified, using default values
  2208   200005                     	org	2097157
  2209   200005  FF                 	db	255
  2210                           
  2211                           ;Config register IDLOC6 @ 0x200006
  2212                           ;	unspecified, using default values
  2213   200006                     	org	2097158
  2214   200006  FF                 	db	255
  2215                           
  2216                           ;Config register IDLOC7 @ 0x200007
  2217                           ;	unspecified, using default values
  2218   200007                     	org	2097159
  2219   200007  FF                 	db	255
  2220                           
  2221                           	psect	config
  2222                           
  2223                           ; Padding undefined space
  2224   300000                     	org	3145728
  2225   300000  FF                 	db	255
  2226                           
  2227                           ;Config register CONFIG1H @ 0x300001
  2228                           ;	Oscillator Selection bits
  2229                           ;	FOSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  2230                           ;	Fail-Safe Clock Monitor Enable bit
  2231                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2232                           ;	Internal/External Oscillator Switchover bit
  2233                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2234   300001                     	org	3145729
  2235   300001  08                 	db	8
  2236                           
  2237                           ;Config register CONFIG2L @ 0x300002
  2238                           ;	Power-up Timer Enable bit
  2239                           ;	PWRTEN = OFF, PWRT disabled
  2240                           ;	Brown-out Reset Enable bits
  2241                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2242                           ;	Brown Out Reset Voltage bits
  2243                           ;	BORV = 18, VBOR set to 1.8 V nominal
  2244   300002                     	org	3145730
  2245   300002  1F                 	db	31
  2246                           
  2247                           ;Config register CONFIG2H @ 0x300003
  2248                           ;	Watchdog Timer Enable bit
  2249                           ;	WDTEN = OFF, WDT is controlled by SWDTEN bit of the WDTCON register
  2250                           ;	Watchdog Timer Postscale Select bits
  2251                           ;	WDTPS = 32768, 1:32768
  2252   300003                     	org	3145731
  2253   300003  1E                 	db	30
  2254                           
  2255                           ; Padding undefined space
  2256   300004                     	org	3145732
  2257   300004  FF                 	db	255
  2258                           
  2259                           ;Config register CONFIG3H @ 0x300005
  2260                           ;	CCP2 MUX bit
  2261                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2262                           ;	PORTB A/D Enable bit
  2263                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  2264                           ;	Low-Power Timer1 Oscillator Enable bit
  2265                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2266                           ;	HFINTOSC Fast Start-up
  2267                           ;	HFOFST = ON, HFINTOSC starts clocking the CPU without waiting for the oscillator to st
      +                          ablize.
  2268                           ;	MCLR Pin Enable bit
  2269                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2270   300005                     	org	3145733
  2271   300005  8B                 	db	139
  2272                           
  2273                           ;Config register CONFIG4L @ 0x300006
  2274                           ;	Stack Full/Underflow Reset Enable bit
  2275                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2276                           ;	Single-Supply ICSP Enable bit
  2277                           ;	LVP = OFF, Single-Supply ICSP disabled
  2278                           ;	Extended Instruction Set Enable bit
  2279                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2280                           ;	Background Debugger Enable bit
  2281                           ;	DEBUG = 0x1, unprogrammed default
  2282   300006                     	org	3145734
  2283   300006  81                 	db	129
  2284                           
  2285                           ; Padding undefined space
  2286   300007                     	org	3145735
  2287   300007  FF                 	db	255
  2288                           
  2289                           ;Config register CONFIG5L @ 0x300008
  2290                           ;	Code Protection Block 0
  2291                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  2292                           ;	Code Protection Block 1
  2293                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  2294                           ;	Code Protection Block 2
  2295                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  2296                           ;	Code Protection Block 3
  2297                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  2298   300008                     	org	3145736
  2299   300008  0F                 	db	15
  2300                           
  2301                           ;Config register CONFIG5H @ 0x300009
  2302                           ;	Boot Block Code Protection bit
  2303                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2304                           ;	Data EEPROM Code Protection bit
  2305                           ;	CPD = OFF, Data EEPROM not code-protected
  2306   300009                     	org	3145737
  2307   300009  C0                 	db	192
  2308                           
  2309                           ;Config register CONFIG6L @ 0x30000A
  2310                           ;	Write Protection Block 0
  2311                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  2312                           ;	Write Protection Block 1
  2313                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  2314                           ;	Write Protection Block 2
  2315                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  2316                           ;	Write Protection Block 3
  2317                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  2318   30000A                     	org	3145738
  2319   30000A  0F                 	db	15
  2320                           
  2321                           ;Config register CONFIG6H @ 0x30000B
  2322                           ;	Configuration Register Write Protection bit
  2323                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2324                           ;	Boot Block Write Protection bit
  2325                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2326                           ;	Data EEPROM Write Protection bit
  2327                           ;	WRTD = OFF, Data EEPROM not write-protected
  2328   30000B                     	org	3145739
  2329   30000B  E0                 	db	224
  2330                           
  2331                           ;Config register CONFIG7L @ 0x30000C
  2332                           ;	Table Read Protection Block 0
  2333                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  2334                           ;	Table Read Protection Block 1
  2335                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  2336                           ;	Table Read Protection Block 2
  2337                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  2338                           ;	Table Read Protection Block 3
  2339                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2340   30000C                     	org	3145740
  2341   30000C  0F                 	db	15
  2342                           
  2343                           ;Config register CONFIG7H @ 0x30000D
  2344                           ;	Boot Block Table Read Protection bit
  2345                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2346   30000D                     	org	3145741
  2347   30000D  40                 	db	64
  2348                           tosu	equ	0xFFF
  2349                           tosh	equ	0xFFE
  2350                           tosl	equ	0xFFD
  2351                           stkptr	equ	0xFFC
  2352                           pclatu	equ	0xFFB
  2353                           pclath	equ	0xFFA
  2354                           pcl	equ	0xFF9
  2355                           tblptru	equ	0xFF8
  2356                           tblptrh	equ	0xFF7
  2357                           tblptrl	equ	0xFF6
  2358                           tablat	equ	0xFF5
  2359                           prodh	equ	0xFF4
  2360                           prodl	equ	0xFF3
  2361                           indf0	equ	0xFEF
  2362                           postinc0	equ	0xFEE
  2363                           postdec0	equ	0xFED
  2364                           preinc0	equ	0xFEC
  2365                           plusw0	equ	0xFEB
  2366                           fsr0h	equ	0xFEA
  2367                           fsr0l	equ	0xFE9
  2368                           wreg	equ	0xFE8
  2369                           indf1	equ	0xFE7
  2370                           postinc1	equ	0xFE6
  2371                           postdec1	equ	0xFE5
  2372                           preinc1	equ	0xFE4
  2373                           plusw1	equ	0xFE3
  2374                           fsr1h	equ	0xFE2
  2375                           fsr1l	equ	0xFE1
  2376                           bsr	equ	0xFE0
  2377                           indf2	equ	0xFDF
  2378                           postinc2	equ	0xFDE
  2379                           postdec2	equ	0xFDD
  2380                           preinc2	equ	0xFDC
  2381                           plusw2	equ	0xFDB
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        109
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      0       0
    BANK0           160     80     125
    BANK1           256      0      64
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           244      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 45
		 -> main@messages(BANK0[45]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 45
		 -> main@messages(BANK0[45]), 

    jouePendu@mot	PTR unsigned char  size(2) Largest target is 45
		 -> main@messages(BANK0[45]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_jouePendu
    _lcd_init->_lcd_initCGRam
    _lcd_resetSequence->_lcd_ecrireDonnees
    _lcd_initCGRam->_lcd_wrCom
    _lcd_initCGRam->_lcd_wrData
    _lcd_curseurHome->_lcd_wrCom
    _jouePendu->_lcd_ecritChar
    _jouePendu->_lcd_gotoXY
    _lcd_gotoXY->_lcd_wrCom
    _lcd_ecritChar->_lcd_wrCom
    _lcd_ecritChar->_lcd_wrData
    _lcd_wrData->_lcd_busy
    _lcd_wrData->_lcd_ecrireDonnees
    _lcd_wrCom->_lcd_busy
    _lcd_wrCom->_lcd_ecrireDonnees

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                45    45      0    2376
                                             35 BANK0     45    45      0
                         _init_serie
                     _initialisation
                          _jouePendu
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     738
                      _lcd_initCGRam
                  _lcd_resetSequence
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_resetSequence                                    1     1      0      22
                                              2 BANK0      1     1      0
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_initCGRam                                        4     4      0     560
                                              3 BANK0      4     4      0
                    _lcd_curseurHome
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_curseurHome                                      0     0      0     156
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (1) _jouePendu                                           30    28      2    1612
                                              5 BANK0     30    28      2
                              _getch
                              _kbhit
                      _lcd_ecritChar
                         _lcd_gotoXY
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoXY                                           2     1      1     494
                                              3 BANK0      2     1      1
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_ecritChar                                        2     2      0     313
                                              3 BANK0      2     2      0
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_wrData                                           1     1      0     112
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_wrCom                                            1     1      0     156
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (3) _lcd_strobeEnableBit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcd_ecrireDonnees                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_busy                                             2     2      0      46
                                              0 BANK0      2     2      0
                    _lcd_lireDonnees
 ---------------------------------------------------------------------------------
 (4) _lcd_lireDonnees                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _kbhit                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getch                                                1     1      0      15
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialisation                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_serie                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_serie
   _initialisation
   _jouePendu
     _getch
     _kbhit
     _lcd_ecritChar
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_gotoXY
       _lcd_wrCom
     _strlen
   _lcd_init
     _lcd_initCGRam
       _lcd_curseurHome
         _lcd_wrCom
       _lcd_wrCom
       _lcd_wrData
     _lcd_resetSequence
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
     _lcd_wrCom

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F3      0       0      29        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      40       6       25.0%
BITBANK5            F4      0       0      13        0.0%
BANK5               F4      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     50      7D       4       78.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      0       0       1        0.0%
BITBIGSFRll         1E      0       0      27        0.0%
BITBIGSFR_1hh       1B      0       0      19        0.0%
BITBIGSFRlhh         E      0       0      24        0.0%
BITBIGSFR_5          D      0       0      15        0.0%
BITBIGSFR_1llh       C      0       0      21        0.0%
BITBIGSFR_1hl        7      0       0      20        0.0%
BITBIGSFRh           6      0       0      23        0.0%
BITBIGSFR_2          6      0       0      18        0.0%
BITBIGSFR_4          3      0       0      16        0.0%
BITBIGSFR_3          3      0       0      17        0.0%
BITBIGSFRlhlh        2      0       0      25        0.0%
BITBIGSFRlhll        1      0       0      26        0.0%
BITBIGSFR_1lll       1      0       0      22        0.0%
BIGSFR_5             0      0       0     200        0.0%
BIGSFR_4             0      0       0     200        0.0%
BIGSFR_3             0      0       0     200        0.0%
BIGSFR_2             0      0       0     200        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BD      28        0.0%
DATA                 0      0      BD      30        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Nov 06 13:40:26 2023

                         l31 7848                           l34 775A                           l56 7DBE  
                         l90 776A                           l91 7772                           l79 77C4  
                         l88 775C                           u50 7782                           u51 777E  
                         u60 776A                           u61 7766                          l103 778A  
                        l122 773C                          l130 793A                          l125 77A6  
                        l142 7A3E                          l151 774C                          l128 78FE  
                        l136 7AAA                          l129 7932                          l145 77EC  
                        l139 787E                          l166 7B1C                          l177 79D4  
                        l196 7BBA                          l199 7744                          l867 78B8  
                        u300 7B3C                          u301 7B38                          u310 7B58  
                        u311 7B54                          u400 7D6E                          u320 7BA0  
                        u401 7D6A                          u321 7B9C                          u410 7DAC  
                        u330 7BB6                          u411 7DA8                          u331 7BB2  
                        u260 7932                          u420 7DBE                          u340 7C2E  
                        u261 792E                          u421 7DBA                          u341 7C2A  
                        u270 7A84                          u350 7C42                          u271 7A80  
                        u351 7C3E                          u280 7A98                          u360 7C80  
                        u281 7A94                          u361 7C7C                          u441 7826  
                        u290 78AA                          u370 7CC0                          u291 78A6  
                        u371 7CBC                          u507 7A34                          u380 7CEC  
                        u517 7A6C                          u381 7CE8                          u390 7D42  
                        u527 7A9A                          u391 7D3E                          u467 79E2  
                        u477 79FE                          u487 7A10                          u497 7A22  
                        prod 0FF3                  lcd_gotoXY@x 0064                          wreg 0FE8  
                lcd_gotoXY@y 0063                         l1111 7774                         l1121 776E  
                       l1113 7782                         l1211 77B6                         l1115 7788  
                       l1213 77B8                         l1205 77A8                         l1215 77BA  
                       l1207 77AC                         l1119 775C                         l1217 77BC  
                       l1209 77B4                         l1321 7738                         l1401 786A  
                       l1219 77BE                         l1331 7912                         l1411 787A  
                       l1403 786A                         l1341 7922                         l1333 7914  
                       l1325 7790                         l1405 7872                         l1421 7892  
                       l1501 7B5C                         l1343 7922                         l1335 7914  
                       l1327 78FA                         l1351 7A44                         l1407 7876  
                       l1431 79A0                         l1423 78AA                         l1415 7746  
                       l1503 7B8A                         l1511 7BB6                         l1345 7934  
                       l1337 7916                         l1329 7902                         l1361 7A50  
                       l1353 7A48                         l1409 7876                         l1433 79AA  
                       l1441 7AB4                         l1417 7880                         l1521 7BDC  
                       l1505 7B8E                         l1513 77C6                         l1339 7920  
                       l1371 7A6A                         l1363 7A5A                         l1355 7A4C  
                       l1427 7986                         l1443 7AC4                         l1451 7AF4  
                       l1419 788C                         l1531 7C2E                         l1523 7BEA  
                       l1507 7BA0                         l1515 77E8                         l1349 773E  
                       l1381 7AA6                         l1373 7A72                         l1365 7A5E  
                       l1357 7A4C                         l1429 7996                         l1437 79B4  
                       l1445 7AD4                         l1541 7C92                         l1533 7C42  
                       l1525 7BFA                         l1517 7BBC                         l1509 7BA4  
                       l1461 79F2                         l1453 79D6                         l1199 774E  
                       l1383 7AA6                         l1375 7A84                         l1367 7A5E  
                       l1359 7A4E                         l1391 7858                         l1447 7AE4  
                       l1439 7AB0                         l1551 7CFA                         l1543 7C98  
                       l1535 7C4A                         l1527 7C00                         l1519 7BC8  
                       l1471 7A0E                         l1463 79F8                         l1455 79DA  
                       l1377 7A98                         l1369 7A66                         l1393 7858  
                       l1561 7D6E                         l1553 7D14                         l1545 7CC0  
                       l1537 7C58                         l1529 7C06                         l1481 7A2E  
                       l1473 7A16                         l1465 79FC                         l1457 79EE  
                       l1379 7AA2                         l1395 785A                         l1387 7850  
                       l1547 7CCE                         l1555 7D1A                         l1539 7C80  
                       l1571 7DAC                         l1491 7B2A                         l1483 7A32  
                       l1475 7A1C                         l1467 7A04                         l1459 79F0  
                       l1397 785C                         l1389 7854                         l1565 7D78  
                       l1557 7D42                         l1549 7CEC                         l1485 7A3A  
                       l1477 7A20                         l1469 7A0A                         l1581 781C  
                       l1399 7866                         l1567 7D7E                         l1559 7D50  
                       l1495 7B40                         l1487 7B1E                         l1479 7A28  
                       l1583 782E                         l1569 7D84                         l1497 7B46  
                       l1489 7B24                         l1585 7832                         l1587 7836  
                       l1589 783A                         _RCIF 7CF5             ??_initialisation 0060  
                       _main 781C                         fsr2h 0FDA                         indf2 0FDF  
                       fsr1l 0FE1                         fsr2l 0FD9                         prodl 0FF3  
                       start 0000                 ___param_bank 0000              ??_lcd_ecritChar 0063  
                      ?_main 0060                jouePendu@i_87 007D                jouePendu@i_88 0081  
              jouePendu@i_89 007B                        _ANSEL 0F7E                        _RCREG 0FAE  
                      _SPBRG 0FAF                        _PORTD 0F83                        _TRISA 0F92  
                      _TRISB 0F93                        _TRISD 0F95                        _TXREG 0FAD  
               main@messages 0083              ??_lcd_initCGRam 0063                        _getch 775C  
                      _kbhit 7774                        tablat 0FF5                        plusw1 0FE3  
                      plusw2 0FDB                        status 0FD8              __initialization 793C  
               __end_of_main 784C                       ??_main 0083                __activetblptr 0003  
                     ?_getch 0060                       ?_kbhit 0060                       _SPBRGH 0FB0  
             lcd_initCGRam@i 0065               lcd_initCGRam@j 0066             __end_of_lcd_busy 793C  
           __end_of_lcd_init 77EE                       isa$std 0001                       getch@c 0060  
                     _strlen 7880                       tblptrh 0FF7                       tblptrl 0FF6  
                     tblptru 0FF8            _lcd_resetSequence 79D6                   __accesstop 0060  
    __end_of__initialization 797C          _lcd_strobeEnableBit 773E           ?_lcd_resetSequence 0060  
              ___rparam_used 0000                 __pidataBANK0 77EF                 __pidataBANK1 78BA  
        ??_lcd_resetSequence 0062                __end_of_getch 7774                __end_of_kbhit 778C  
       ?_lcd_strobeEnableBit 0060                      ??_getch 0060                      ??_kbhit 0060  
  __end_of_lcd_resetSequence 7A40            _lcd_ecrireDonnees 778C           ?_lcd_ecrireDonnees 0060  
        ??_lcd_ecrireDonnees 0060        ??_lcd_strobeEnableBit 0060              jouePendu@Lettre 0077  
                    ?_strlen 0060                   _lcd_gotoXY 7AAC                   _lcd_wrData 784C  
  __end_of_lcd_ecrireDonnees 77A8              jouePendu@trouve 0068                    ?_lcd_busy 0060  
                  ?_lcd_init 0060      lcd_ecrireDonnees@donnee 0061                      __Hparam 0000  
                    __Lparam 0000            __end_of_lcd_wrCom 7AAC                      __pcinit 793C  
                 _init_serie 77A8                      __ramtop 0600                      __ptext0 781C  
                    __ptext1 77C6                      __ptext2 79D6                      __ptext3 7B1E  
                    __ptext4 7746                      __ptext5 7BBC                      __ptext6 7880  
                    __ptext7 7AAC                      __ptext8 7982                      __ptext9 784C  
      __end_of_lcd_ecritChar 79D6              lcd_busy@adresse 0061             lcd_ecritChar@car 0063  
          __end_of_jouePendu 7DC0                   ??_lcd_busy 0060                   ??_lcd_init 0067  
       end_of_initialization 797C        __end_of_lcd_initCGRam 7BBC            ??_lcd_lireDonnees 0060  
          jouePendu@longMess 007F                    _RCSTAbits 0FAB                      postdec1 0FE5  
                    postinc0 0FEE                      postinc2 0FDE            ??_lcd_curseurHome 0063  
        lcd_ecritChar@posRam 0064                      strlen@s 0060                    _PORTAbits 0F80  
                ?_lcd_gotoXY 0063                    _TRISCbits 0F94                  ?_lcd_wrData 0060  
                  _TXSTAbits 0FAC                 jouePendu@mot 0065                  _BAUDCONbits 0FB8  
                ?_init_serie 0060               __end_of_strlen 78BA          start_initialization 793C  
                __pdataBANK0 00B0                  __pdataBANK1 0100                     ??_strlen 0062  
              __pcstackBANK0 0060                   jouePendu@i 0079  __end_of_lcd_strobeEnableBit 7746  
             _initialisation 774E                    _lcd_wrCom 7A40              _lcd_lireDonnees 7738  
        lcd_wrData@caractere 0062                    _jouePendu 7BBC              _lcd_curseurHome 7746  
     __end_of_initialisation 775C                    main@F2686 00B0                   ?_lcd_wrCom 0060  
               ??_lcd_gotoXY 0064                 ??_lcd_wrData 0062            lcd_wrCom@commande 0062  
                  copy_data0 7950                    copy_data1 7970                   ?_jouePendu 0065  
                   __Hparam0 0000                     __Lparam0 0000              ?_initialisation 0060  
         __end_of_lcd_gotoXY 7B1E           __end_of_lcd_wrData 7880                 ??_init_serie 0060  
    __end_of_lcd_lireDonnees 773E                     _matCGRAM 0100      __end_of_lcd_curseurHome 774E  
                   __ptext10 7A40                     __ptext11 773E                     __ptext12 778C  
                   __ptext13 78FA                     __ptext14 7738                     __ptext15 7774  
                   __ptext16 775C                     __ptext17 774E                     __ptext18 77A8  
                   _lcd_busy 78FA                     _lcd_init 77C6           __end_of_init_serie 77C6  
                   isa$xinst 0000                  ??_lcd_wrCom 0062                _lcd_ecritChar 7982  
                ??_jouePendu 0067                _lcd_initCGRam 7B1E         jouePendu@toutTrouver 0078  
             ?_lcd_ecritChar 0060             ?_lcd_lireDonnees 0060                     strlen@cp 0062  
           ?_lcd_curseurHome 0060               ?_lcd_initCGRam 0060  
