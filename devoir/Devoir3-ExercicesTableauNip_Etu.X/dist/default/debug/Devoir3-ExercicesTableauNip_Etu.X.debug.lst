

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Nov 04 13:52:09 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec,minocg
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec,minocg
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1,minocg
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1,minocg
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,minocg
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,minocg
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2,minocg
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2,minocg
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,minocg
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1,minocg
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	param0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22   000000                     
    23                           ; Generated 21/07/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F45K20 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57   000000                     
    58                           	psect	idataBANK0
    59   000A3C                     __pidataBANK0:
    60                           	callstack 0
    61                           
    62                           ;initializer for main@F3218
    63   000A3C  30                 	db	48
    64   000A3D  30                 	db	48
    65   000A3E  32                 	db	50
    66   000A3F  32                 	db	50
    67   000A40  00                 	db	0
    68                           
    69                           ;initializer for main@F3214
    70   000A41  41                 	db	65
    71   000A42  6C                 	db	108
    72   000A43  6C                 	db	108
    73   000A44  6F                 	db	111
    74   000A45  00                 	db	0
    75                           
    76                           	psect	smallconst
    77   000600                     __psmallconst:
    78                           	callstack 0
    79   000600  00                 	db	0
    80   000601                     _g_nip:
    81                           	callstack 0
    82   000601  31                 	db	49
    83   000602  32                 	db	50
    84   000603  33                 	db	51
    85   000604  34                 	db	52
    86   000605  00                 	db	0
    87   000606  39                 	db	57
    88   000607  33                 	db	51
    89   000608  32                 	db	50
    90   000609  37                 	db	55
    91   00060A  00                 	db	0
    92   00060B  39                 	db	57
    93   00060C  34                 	db	52
    94   00060D  36                 	db	54
    95   00060E  30                 	db	48
    96   00060F  00                 	db	0
    97   000610  30                 	db	48
    98   000611  30                 	db	48
    99   000612  32                 	db	50
   100   000613  32                 	db	50
   101   000614  00                 	db	0
   102   000615  39                 	db	57
   103   000616  38                 	db	56
   104   000617  34                 	db	52
   105   000618  38                 	db	56
   106   000619  00                 	db	0
   107   00061A  30                 	db	48
   108   00061B  34                 	db	52
   109   00061C  38                 	db	56
   110   00061D  32                 	db	50
   111   00061E  00                 	db	0
   112   00061F  39                 	db	57
   113   000620  39                 	db	57
   114   000621  39                 	db	57
   115   000622  39                 	db	57
   116   000623  00                 	db	0
   117   000624  35                 	db	53
   118   000625  32                 	db	50
   119   000626  38                 	db	56
   120   000627  38                 	db	56
   121   000628  00                 	db	0
   122   000629  31                 	db	49
   123   00062A  31                 	db	49
   124   00062B  31                 	db	49
   125   00062C  34                 	db	52
   126   00062D  00                 	db	0
   127   00062E  31                 	db	49
   128   00062F  31                 	db	49
   129   000630  39                 	db	57
   130   000631  35                 	db	53
   131   000632  00                 	db	0
   132   000633                     __end_of_g_nip:
   133                           	callstack 0
   134   000633                     
   135                           ; BSR set to: 0
   136   000633  25                 	db	37
   137   000634  30                 	db	48	;'0'
   138   000635  34                 	db	52	;'4'
   139   000636  64                 	db	100	;'d'
   140   000637  00                 	db	0
   141   000638  00                 	db	0	; dummy byte at the end
   142   000000                     
   143                           ; #config settings
   144                           
   145                           	psect	cinit
   146   0009E2                     __pcinit:
   147                           	callstack 0
   148   0009E2                     start_initialization:
   149                           	callstack 0
   150   0009E2                     __initialization:
   151                           	callstack 0
   152                           
   153                           ; Initialize objects allocated to BANK0 (10 bytes)
   154                           ; load TBLPTR registers with __pidataBANK0
   155   0009E2  0E3C               	movlw	low __pidataBANK0
   156   0009E4  6EF6               	movwf	tblptrl,c
   157   0009E6  0E0A               	movlw	high __pidataBANK0
   158   0009E8  6EF7               	movwf	tblptrh,c
   159   0009EA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   160   0009EC  6EF8               	movwf	tblptru,c
   161   0009EE  EE00  F0C4         	lfsr	0,__pdataBANK0
   162   0009F2  EE10 F00A          	lfsr	1,10
   163   0009F6                     copy_data0:
   164   0009F6  0009               	tblrd		*+
   165   0009F8  CFF5 FFEE          	movff	tablat,postinc0
   166   0009FC  50E5               	movf	postdec1,w,c
   167   0009FE  50E1               	movf	fsr1l,w,c
   168   000A00  E1FA               	bnz	copy_data0
   169                           
   170                           ; Clear objects allocated to BANK0 (54 bytes)
   171   000A02  EE00  F060         	lfsr	0,__pbssBANK0
   172   000A06  0E36               	movlw	54
   173   000A08                     clear_0:
   174   000A08  6AEE               	clrf	postinc0,c
   175   000A0A  06E8               	decf	wreg,f,c
   176   000A0C  E1FD               	bnz	clear_0
   177   000A0E                     end_of_initialization:
   178                           	callstack 0
   179   000A0E                     __end_of__initialization:
   180                           	callstack 0
   181   000A0E  0100               	movlb	0
   182   000A10  EFBA  F003         	goto	_main	;jump to C main() function
   183                           
   184                           	psect	bssBANK0
   185   000060                     __pbssBANK0:
   186                           	callstack 0
   187   000060                     _g_nipEnOrdre:
   188                           	callstack 0
   189   000060                     	ds	50
   190   000092                     	ds	4
   191                           
   192                           	psect	dataBANK0
   193   0000C4                     __pdataBANK0:
   194                           	callstack 0
   195   0000C4                     main@F3218:
   196                           	callstack 0
   197   0000C4                     	ds	5
   198   0000C9                     main@F3214:
   199                           	callstack 0
   200   0000C9                     	ds	5
   201                           
   202                           	psect	cstackBANK0
   203   000096                     __pcstackBANK0:
   204                           	callstack 0
   205   000096                     ?_strcpy:
   206                           	callstack 0
   207   000096                     ?___wmul:
   208                           	callstack 0
   209   000096                     ___wmul@multiplier:
   210                           	callstack 0
   211   000096                     strcpy@dest:
   212                           	callstack 0
   213                           
   214                           ; 2 bytes @ 0x0
   215   000096                     	ds	2
   216   000098                     ___wmul@multiplicand:
   217                           	callstack 0
   218   000098                     strcpy@src:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x2
   222   000098                     	ds	2
   223   00009A                     ___wmul@product:
   224                           	callstack 0
   225   00009A                     strcpy@s:
   226                           	callstack 0
   227                           
   228                           ; 2 bytes @ 0x4
   229   00009A                     	ds	2
   230   00009C                     ??_metEnOrdre:
   231   00009C                     ?_strcmp:
   232                           	callstack 0
   233   00009C                     strcmp@l:
   234                           	callstack 0
   235   00009C                     strcpy@d:
   236                           	callstack 0
   237                           
   238                           ; 2 bytes @ 0x6
   239   00009C                     	ds	2
   240   00009E                     metEnOrdre@temp:
   241                           	callstack 0
   242   00009E                     strcmp@r:
   243                           	callstack 0
   244                           
   245                           ; 2 bytes @ 0x8
   246   00009E                     	ds	1
   247   00009F                     metEnOrdre@i:
   248                           	callstack 0
   249                           
   250                           ; 2 bytes @ 0x9
   251   00009F                     	ds	1
   252   0000A0                     ??_strcmp:
   253                           
   254                           ; 1 bytes @ 0xA
   255   0000A0                     	ds	1
   256   0000A1                     metEnOrdre@j:
   257                           	callstack 0
   258                           
   259                           ; 2 bytes @ 0xB
   260   0000A1                     	ds	1
   261   0000A2                     ?_trouveAQui:
   262                           	callstack 0
   263   0000A2                     verifNip@index:
   264                           	callstack 0
   265   0000A2                     trouveAQui@leNip:
   266                           	callstack 0
   267                           
   268                           ; 2 bytes @ 0xC
   269   0000A2                     	ds	2
   270   0000A4                     verifNip@leNip:
   271                           	callstack 0
   272   0000A4                     trouveAQui@retour:
   273                           	callstack 0
   274                           
   275                           ; 2 bytes @ 0xE
   276   0000A4                     	ds	2
   277   0000A6                     trouveAQui@i:
   278                           	callstack 0
   279                           
   280                           ; 2 bytes @ 0x10
   281   0000A6                     	ds	2
   282   0000A8                     main@s1:
   283                           	callstack 0
   284                           
   285                           ; 10 bytes @ 0x12
   286   0000A8                     	ds	10
   287   0000B2                     main@nbEssais:
   288                           	callstack 0
   289                           
   290                           ; 4 bytes @ 0x1C
   291   0000B2                     	ds	4
   292   0000B6                     main@s2:
   293                           	callstack 0
   294                           
   295                           ; 5 bytes @ 0x20
   296   0000B6                     	ds	5
   297   0000BB                     main@sonNip:
   298                           	callstack 0
   299                           
   300                           ; 5 bytes @ 0x25
   301   0000BB                     	ds	5
   302   0000C0                     main@test:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x2A
   306   0000C0                     	ds	2
   307   0000C2                     main@usager:
   308                           	callstack 0
   309                           
   310                           ; 2 bytes @ 0x2C
   311   0000C2                     	ds	2
   312                           
   313 ;;
   314 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   315 ;;
   316 ;; *************** function _main *****************
   317 ;; Defined at:
   318 ;;		line 33 in file "main.c"
   319 ;; Parameters:    Size  Location     Type
   320 ;;		None
   321 ;; Auto vars:     Size  Location     Type
   322 ;;  s1             10   18[BANK0 ] unsigned char [10]
   323 ;;  sonNip          5   37[BANK0 ] unsigned char [5]
   324 ;;  s2              5   32[BANK0 ] unsigned char [5]
   325 ;;  nbEssais        4   28[BANK0 ] long 
   326 ;;  usager          2   44[BANK0 ] int 
   327 ;;  test            2   42[BANK0 ] int 
   328 ;; Return value:  Size  Location     Type
   329 ;;                  1    wreg      void 
   330 ;; Registers used:
   331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   332 ;; Tracked objects:
   333 ;;		On entry : 0/0
   334 ;;		On exit  : 0/0
   335 ;;		Unchanged: 0/0
   336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   337 ;;      Params:         0       0       0       0       0       0       0
   338 ;;      Locals:         0      28       0       0       0       0       0
   339 ;;      Temps:          0       0       0       0       0       0       0
   340 ;;      Totals:         0      28       0       0       0       0       0
   341 ;;Total ram usage:       28 bytes
   342 ;; Hardware stack levels required when called: 2
   343 ;; This function calls:
   344 ;;		_metEnOrdre
   345 ;;		_strcpy
   346 ;;		_trouveAQui
   347 ;;		_verifNip
   348 ;; This function is called by:
   349 ;;		Startup code after reset
   350 ;; This function uses a non-reentrant model
   351 ;;
   352                           
   353                           	psect	text0
   354   000774                     __ptext0:
   355                           	callstack 0
   356   000774                     _main:
   357                           	callstack 29
   358   000774                     
   359                           ;main.c: 36:     char s1[10];;main.c: 37:     char s2[] = "Allo";
   360   000774  EE20  F0C9         	lfsr	2,main@F3214
   361   000778  EE10  F0B6         	lfsr	1,main@s2
   362   00077C  0E04               	movlw	4
   363   00077E                     u261:
   364   00077E  CFDB FFE3          	movff	plusw2,plusw1
   365   000782  06E8               	decf	wreg,f,c
   366   000784  E2FC               	bc	u261
   367   000786                     
   368                           ;main.c: 38:     strcpy(s1,s2);
   369   000786  0EA8               	movlw	low main@s1
   370   000788  0100               	movlb	0	; force () banked
   371   00078A  6F96               	movwf	strcpy@dest& (0+255),b
   372   00078C  0E00               	movlw	high main@s1
   373   00078E  6F97               	movwf	(strcpy@dest+1)& (0+255),b
   374   000790  0EB6               	movlw	low main@s2
   375   000792  0100               	movlb	0	; force () banked
   376   000794  6F98               	movwf	strcpy@src& (0+255),b
   377   000796  0E00               	movlw	high main@s2
   378   000798  6F99               	movwf	(strcpy@src+1)& (0+255),b
   379   00079A  ECCD  F004         	call	_strcpy	;wreg free
   380   00079E                     
   381                           ;main.c: 40:     int test = 0;
   382   00079E  0E00               	movlw	0
   383   0007A0  0100               	movlb	0	; force () banked
   384   0007A2  6FC1               	movwf	(main@test+1)& (0+255),b
   385   0007A4  0E00               	movlw	0
   386   0007A6  6FC0               	movwf	main@test& (0+255),b
   387   0007A8                     
   388                           ; BSR set to: 0
   389                           ;main.c: 41:     int usager = 1;
   390   0007A8  0E00               	movlw	0
   391   0007AA  0100               	movlb	0	; force () banked
   392   0007AC  6FC3               	movwf	(main@usager+1)& (0+255),b
   393   0007AE  0E01               	movlw	1
   394   0007B0  6FC2               	movwf	main@usager& (0+255),b
   395   0007B2                     
   396                           ; BSR set to: 0
   397                           ;main.c: 42:     char sonNip[] = "0022";
   398   0007B2  EE20  F0C4         	lfsr	2,main@F3218
   399   0007B6  EE10  F0BB         	lfsr	1,main@sonNip
   400   0007BA  0E04               	movlw	4
   401   0007BC                     u271:
   402   0007BC  CFDB FFE3          	movff	plusw2,plusw1
   403   0007C0  06E8               	decf	wreg,f,c
   404   0007C2  E2FC               	bc	u271
   405   0007C4                     
   406                           ; BSR set to: 0
   407                           ;main.c: 43:     long nbEssais = 0;
   408   0007C4  0E00               	movlw	0
   409   0007C6  0100               	movlb	0	; force () banked
   410   0007C8  6FB2               	movwf	main@nbEssais& (0+255),b
   411   0007CA  0E00               	movlw	0
   412   0007CC  6FB3               	movwf	(main@nbEssais+1)& (0+255),b
   413   0007CE  0E00               	movlw	0
   414   0007D0  6FB4               	movwf	(main@nbEssais+2)& (0+255),b
   415   0007D2  0E00               	movlw	0
   416   0007D4  6FB5               	movwf	(main@nbEssais+3)& (0+255),b
   417   0007D6                     
   418                           ; BSR set to: 0
   419                           ;main.c: 46:     usager = 1;
   420   0007D6  0E00               	movlw	0
   421   0007D8  0100               	movlb	0	; force () banked
   422   0007DA  6FC3               	movwf	(main@usager+1)& (0+255),b
   423   0007DC  0E01               	movlw	1
   424   0007DE  6FC2               	movwf	main@usager& (0+255),b
   425   0007E0                     
   426                           ; BSR set to: 0
   427                           ;main.c: 47:     if (verifNip(usager,sonNip))
   428   0007E0  C0C2  F0A2         	movff	main@usager,verifNip@index
   429   0007E4  C0C3  F0A3         	movff	main@usager+1,verifNip@index+1
   430   0007E8  0EBB               	movlw	low main@sonNip
   431   0007EA  0100               	movlb	0	; force () banked
   432   0007EC  6FA4               	movwf	verifNip@leNip& (0+255),b
   433   0007EE  0E00               	movlw	high main@sonNip
   434   0007F0  6FA5               	movwf	(verifNip@leNip+1)& (0+255),b
   435   0007F2  ECA3  F004         	call	_verifNip	;wreg free
   436   0007F6  0900               	iorlw	0
   437   0007F8  B4D8               	btfsc	status,2,c
   438   0007FA  EF01  F004         	goto	u281
   439   0007FE  EF03  F004         	goto	u280
   440   000802                     u281:
   441   000802  EF08  F004         	goto	l978
   442   000806                     u280:
   443   000806                     
   444                           ;main.c: 48:         test = 1;
   445   000806  0E00               	movlw	0
   446   000808  0100               	movlb	0	; force () banked
   447   00080A  6FC1               	movwf	(main@test+1)& (0+255),b
   448   00080C  0E01               	movlw	1
   449   00080E  6FC0               	movwf	main@test& (0+255),b
   450   000810                     l978:
   451                           
   452                           ;main.c: 51:     usager = trouveAQui(sonNip);
   453   000810  0EBB               	movlw	low main@sonNip
   454   000812  0100               	movlb	0	; force () banked
   455   000814  6FA2               	movwf	trouveAQui@leNip& (0+255),b
   456   000816  0E00               	movlw	high main@sonNip
   457   000818  6FA3               	movwf	(trouveAQui@leNip+1)& (0+255),b
   458   00081A  EC1C  F004         	call	_trouveAQui	;wreg free
   459   00081E  C0A2  F0C2         	movff	?_trouveAQui,main@usager
   460   000822  C0A3  F0C3         	movff	?_trouveAQui+1,main@usager+1
   461   000826                     
   462                           ;main.c: 58:     metEnOrdre();
   463   000826  EC1D  F003         	call	_metEnOrdre	;wreg free
   464                           
   465                           ;main.c: 59:     test = 0;
   466   00082A  0E00               	movlw	0
   467   00082C  0100               	movlb	0	; force () banked
   468   00082E  6FC1               	movwf	(main@test+1)& (0+255),b
   469   000830  0E00               	movlw	0
   470   000832  6FC0               	movwf	main@test& (0+255),b
   471   000834                     
   472                           ; BSR set to: 0
   473   000834  EF00  F000         	goto	start
   474   000838                     __end_of_main:
   475                           	callstack 0
   476                           
   477 ;; *************** function _verifNip *****************
   478 ;; Defined at:
   479 ;;		line 66 in file "main.c"
   480 ;; Parameters:    Size  Location     Type
   481 ;;  index           2   12[BANK0 ] int 
   482 ;;  leNip           2   14[BANK0 ] PTR unsigned char 
   483 ;;		 -> main@sonNip(5), 
   484 ;; Auto vars:     Size  Location     Type
   485 ;;		None
   486 ;; Return value:  Size  Location     Type
   487 ;;                  1    wreg      _Bool 
   488 ;; Registers used:
   489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   490 ;; Tracked objects:
   491 ;;		On entry : 0/0
   492 ;;		On exit  : 0/0
   493 ;;		Unchanged: 0/0
   494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   495 ;;      Params:         0       4       0       0       0       0       0
   496 ;;      Locals:         0       0       0       0       0       0       0
   497 ;;      Temps:          0       0       0       0       0       0       0
   498 ;;      Totals:         0       4       0       0       0       0       0
   499 ;;Total ram usage:        4 bytes
   500 ;; Hardware stack levels used: 1
   501 ;; Hardware stack levels required when called: 1
   502 ;; This function calls:
   503 ;;		___wmul
   504 ;;		_strcmp
   505 ;; This function is called by:
   506 ;;		_main
   507 ;; This function uses a non-reentrant model
   508 ;;
   509                           
   510                           	psect	text1
   511   000946                     __ptext1:
   512                           	callstack 0
   513   000946                     _verifNip:
   514                           	callstack 29
   515   000946                     
   516                           ;main.c: 66: _Bool verifNip(int index, char *leNip);main.c: 67: {;main.c: 68:     if (st
      +                          rcmp (g_nip[index],leNip) == 0 )
   517   000946  C0A2  F096         	movff	verifNip@index,___wmul@multiplier
   518   00094A  C0A3  F097         	movff	verifNip@index+1,___wmul@multiplier+1
   519   00094E  0E00               	movlw	0
   520   000950  0100               	movlb	0	; force () banked
   521   000952  6F99               	movwf	(___wmul@multiplicand+1)& (0+255),b
   522   000954  0E05               	movlw	5
   523   000956  6F98               	movwf	___wmul@multiplicand& (0+255),b
   524   000958  EC0A  F005         	call	___wmul	;wreg free
   525   00095C  0E01               	movlw	low _g_nip
   526   00095E  0100               	movlb	0	; force () banked
   527   000960  2596               	addwf	?___wmul& (0+255),w,b
   528   000962  0100               	movlb	0	; force () banked
   529   000964  6F9C               	movwf	strcmp@l& (0+255),b
   530   000966  0E06               	movlw	high _g_nip
   531   000968  0100               	movlb	0	; force () banked
   532   00096A  2197               	addwfc	(?___wmul+1)& (0+255),w,b
   533   00096C  0100               	movlb	0	; force () banked
   534   00096E  6F9D               	movwf	(strcmp@l+1)& (0+255),b
   535   000970  C0A4  F09E         	movff	verifNip@leNip,strcmp@r
   536   000974  C0A5  F09F         	movff	verifNip@leNip+1,strcmp@r+1
   537   000978  EC64  F004         	call	_strcmp	;wreg free
   538   00097C  0100               	movlb	0	; force () banked
   539   00097E  519C               	movf	?_strcmp& (0+255),w,b
   540   000980  119D               	iorwf	(?_strcmp+1)& (0+255),w,b
   541   000982  A4D8               	btfss	status,2,c
   542   000984  EFC6  F004         	goto	u191
   543   000988  EFC8  F004         	goto	u190
   544   00098C                     u191:
   545   00098C  EFCB  F004         	goto	l918
   546   000990                     u190:
   547   000990                     
   548                           ; BSR set to: 0
   549                           ;main.c: 69:         return 1;
   550   000990  0E01               	movlw	1
   551   000992  EFCC  F004         	goto	l34
   552   000996                     l918:
   553                           
   554                           ; BSR set to: 0
   555                           ;main.c: 71:         return 0;
   556   000996  0E00               	movlw	0
   557   000998                     l34:
   558                           
   559                           ; BSR set to: 0
   560   000998  0012               	return		;funcret
   561   00099A                     __end_of_verifNip:
   562                           	callstack 0
   563                           
   564 ;; *************** function _trouveAQui *****************
   565 ;; Defined at:
   566 ;;		line 76 in file "main.c"
   567 ;; Parameters:    Size  Location     Type
   568 ;;  leNip           2   12[BANK0 ] PTR unsigned char 
   569 ;;		 -> essaisNip@leNip(5), main@sonNip(5), 
   570 ;; Auto vars:     Size  Location     Type
   571 ;;  i               2   16[BANK0 ] int 
   572 ;;  retour          2   14[BANK0 ] int 
   573 ;; Return value:  Size  Location     Type
   574 ;;                  2   12[BANK0 ] int 
   575 ;; Registers used:
   576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   582 ;;      Params:         0       2       0       0       0       0       0
   583 ;;      Locals:         0       4       0       0       0       0       0
   584 ;;      Temps:          0       0       0       0       0       0       0
   585 ;;      Totals:         0       6       0       0       0       0       0
   586 ;;Total ram usage:        6 bytes
   587 ;; Hardware stack levels used: 1
   588 ;; Hardware stack levels required when called: 1
   589 ;; This function calls:
   590 ;;		___wmul
   591 ;;		_strcmp
   592 ;; This function is called by:
   593 ;;		_main
   594 ;;		_essaisNip
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           	psect	text2
   599   000838                     __ptext2:
   600                           	callstack 0
   601   000838                     _trouveAQui:
   602                           	callstack 29
   603   000838                     
   604                           ;main.c: 76: int trouveAQui(char* leNip);main.c: 77: {;main.c: 78:     int retour = -1;
   605   000838  0100               	movlb	0	; force () banked
   606   00083A  69A4               	setf	trouveAQui@retour& (0+255),b
   607   00083C  69A5               	setf	(trouveAQui@retour+1)& (0+255),b
   608   00083E                     
   609                           ; BSR set to: 0
   610                           ;main.c: 79:     int i=0;
   611   00083E  0E00               	movlw	0
   612   000840  0100               	movlb	0	; force () banked
   613   000842  6FA7               	movwf	(trouveAQui@i+1)& (0+255),b
   614   000844  0E00               	movlw	0
   615   000846  6FA6               	movwf	trouveAQui@i& (0+255),b
   616   000848                     l926:
   617                           
   618                           ; BSR set to: 0
   619                           ;main.c: 82:     {;main.c: 83:         if (strcmp (g_nip[i],leNip)==0)
   620   000848  C0A6  F096         	movff	trouveAQui@i,___wmul@multiplier
   621   00084C  C0A7  F097         	movff	trouveAQui@i+1,___wmul@multiplier+1
   622   000850  0E00               	movlw	0
   623   000852  0100               	movlb	0	; force () banked
   624   000854  6F99               	movwf	(___wmul@multiplicand+1)& (0+255),b
   625   000856  0E05               	movlw	5
   626   000858  6F98               	movwf	___wmul@multiplicand& (0+255),b
   627   00085A  EC0A  F005         	call	___wmul	;wreg free
   628   00085E  0E01               	movlw	low _g_nip
   629   000860  0100               	movlb	0	; force () banked
   630   000862  2596               	addwf	?___wmul& (0+255),w,b
   631   000864  0100               	movlb	0	; force () banked
   632   000866  6F9C               	movwf	strcmp@l& (0+255),b
   633   000868  0E06               	movlw	high _g_nip
   634   00086A  0100               	movlb	0	; force () banked
   635   00086C  2197               	addwfc	(?___wmul+1)& (0+255),w,b
   636   00086E  0100               	movlb	0	; force () banked
   637   000870  6F9D               	movwf	(strcmp@l+1)& (0+255),b
   638   000872  C0A2  F09E         	movff	trouveAQui@leNip,strcmp@r
   639   000876  C0A3  F09F         	movff	trouveAQui@leNip+1,strcmp@r+1
   640   00087A  EC64  F004         	call	_strcmp	;wreg free
   641   00087E  0100               	movlb	0	; force () banked
   642   000880  519C               	movf	?_strcmp& (0+255),w,b
   643   000882  119D               	iorwf	(?_strcmp+1)& (0+255),w,b
   644   000884  A4D8               	btfss	status,2,c
   645   000886  EF47  F004         	goto	u201
   646   00088A  EF49  F004         	goto	u200
   647   00088E                     u201:
   648   00088E  EF4D  F004         	goto	l930
   649   000892                     u200:
   650   000892                     
   651                           ; BSR set to: 0
   652                           ;main.c: 84:             retour = i;
   653   000892  C0A6  F0A4         	movff	trouveAQui@i,trouveAQui@retour
   654   000896  C0A7  F0A5         	movff	trouveAQui@i+1,trouveAQui@retour+1
   655   00089A                     l930:
   656                           
   657                           ; BSR set to: 0
   658                           ;main.c: 85:         i++;
   659   00089A  0100               	movlb	0	; force () banked
   660   00089C  4BA6               	infsnz	trouveAQui@i& (0+255),f,b
   661   00089E  2BA7               	incf	(trouveAQui@i+1)& (0+255),f,b
   662   0008A0                     
   663                           ; BSR set to: 0
   664                           ;main.c: 86:     }while (i < 10);
   665   0008A0  0100               	movlb	0	; force () banked
   666   0008A2  BFA7               	btfsc	(trouveAQui@i+1)& (0+255),7,b
   667   0008A4  EF5D  F004         	goto	u211
   668   0008A8  51A7               	movf	(trouveAQui@i+1)& (0+255),w,b
   669   0008AA  E109               	bnz	u210
   670   0008AC  0E0A               	movlw	10
   671   0008AE  5DA6               	subwf	trouveAQui@i& (0+255),w,b
   672   0008B0  A0D8               	btfss	status,0,c
   673   0008B2  EF5D  F004         	goto	u211
   674   0008B6  EF5F  F004         	goto	u210
   675   0008BA                     u211:
   676   0008BA  EF24  F004         	goto	l926
   677   0008BE                     u210:
   678   0008BE                     
   679                           ; BSR set to: 0
   680                           ;main.c: 88:     return retour;
   681   0008BE  C0A4  F0A2         	movff	trouveAQui@retour,?_trouveAQui
   682   0008C2  C0A5  F0A3         	movff	trouveAQui@retour+1,?_trouveAQui+1
   683   0008C6                     
   684                           ; BSR set to: 0
   685   0008C6  0012               	return		;funcret
   686   0008C8                     __end_of_trouveAQui:
   687                           	callstack 0
   688                           
   689 ;; *************** function _strcmp *****************
   690 ;; Defined at:
   691 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\strcmp.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;  l               2    6[BANK0 ] PTR const unsigned char 
   694 ;;		 -> g_nip(50), 
   695 ;;  r               2    8[BANK0 ] PTR const unsigned char 
   696 ;;		 -> essaisNip@leNip(5), main@sonNip(5), 
   697 ;; Auto vars:     Size  Location     Type
   698 ;;		None
   699 ;; Return value:  Size  Location     Type
   700 ;;                  2    6[BANK0 ] int 
   701 ;; Registers used:
   702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   708 ;;      Params:         0       4       0       0       0       0       0
   709 ;;      Locals:         0       0       0       0       0       0       0
   710 ;;      Temps:          0       2       0       0       0       0       0
   711 ;;      Totals:         0       6       0       0       0       0       0
   712 ;;Total ram usage:        6 bytes
   713 ;; Hardware stack levels used: 1
   714 ;; This function calls:
   715 ;;		Nothing
   716 ;; This function is called by:
   717 ;;		_verifNip
   718 ;;		_trouveAQui
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text3
   723   0008C8                     __ptext3:
   724                           	callstack 0
   725   0008C8                     _strcmp:
   726                           	callstack 29
   727   0008C8  EF6B  F004         	goto	l888
   728   0008CC                     l886:
   729   0008CC  0100               	movlb	0	; () banked
   730   0008CE  4B9C               	infsnz	strcmp@l& (0+255),f,b
   731   0008D0  2B9D               	incf	(strcmp@l+1)& (0+255),f,b
   732   0008D2  4B9E               	infsnz	strcmp@r& (0+255),f,b
   733   0008D4  2B9F               	incf	(strcmp@r+1)& (0+255),f,b
   734   0008D6                     l888:
   735   0008D6  C09E  FFD9         	movff	strcmp@r,fsr2l
   736   0008DA  C09F  FFDA         	movff	strcmp@r+1,fsr2h
   737   0008DE  C09C  FFF6         	movff	strcmp@l,tblptrl
   738   0008E2  C09D  FFF7         	movff	strcmp@l+1,tblptrh
   739   0008E6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   740   0008E6  6AF8               	clrf	tblptru,c
   741   0008E8                     	endif
   742   0008E8                     	if	0	;tblptru may be non-zero
   743   0008E8                     	endif
   744   0008E8  50DE               	movf	postinc2,w,c
   745   0008EA  0009               	tblrd		*+
   746   0008EC  18F5               	xorwf	tablat,w,c
   747   0008EE  A4D8               	btfss	status,2,c
   748   0008F0  EF7C  F004         	goto	u161
   749   0008F4  EF7E  F004         	goto	u160
   750   0008F8                     u161:
   751   0008F8  EF8D  F004         	goto	l892
   752   0008FC                     u160:
   753   0008FC  C09C  FFF6         	movff	strcmp@l,tblptrl
   754   000900  C09D  FFF7         	movff	strcmp@l+1,tblptrh
   755   000904                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   756   000904  6AF8               	clrf	tblptru,c
   757   000906                     	endif
   758   000906                     	if	0	;tblptru may be non-zero
   759   000906                     	endif
   760   000906  0008               	tblrd		*
   761   000908  50F5               	movf	tablat,w,c
   762   00090A  0900               	iorlw	0
   763   00090C  A4D8               	btfss	status,2,c
   764   00090E  EF8B  F004         	goto	u171
   765   000912  EF8D  F004         	goto	u170
   766   000916                     u171:
   767   000916  EF66  F004         	goto	l886
   768   00091A                     u170:
   769   00091A                     l892:
   770   00091A  C09C  FFF6         	movff	strcmp@l,tblptrl
   771   00091E  C09D  FFF7         	movff	strcmp@l+1,tblptrh
   772   000922                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   773   000922  6AF8               	clrf	tblptru,c
   774   000924                     	endif
   775   000924                     	if	0	;tblptru may be non-zero
   776   000924                     	endif
   777   000924  0008               	tblrd		*
   778   000926  CFF5 F0A0          	movff	tablat,??_strcmp
   779   00092A  C09E  FFD9         	movff	strcmp@r,fsr2l
   780   00092E  C09F  FFDA         	movff	strcmp@r+1,fsr2h
   781   000932  50DF               	movf	indf2,w,c
   782   000934  0100               	movlb	0	; () banked
   783   000936  6FA1               	movwf	(??_strcmp+1)& (0+255),b
   784   000938  51A1               	movf	(??_strcmp+1)& (0+255),w,b
   785   00093A  5DA0               	subwf	??_strcmp& (0+255),w,b
   786   00093C  6F9C               	movwf	?_strcmp& (0+255),b
   787   00093E  6B9D               	clrf	(?_strcmp+1)& (0+255),b
   788   000940  A0D8               	btfss	status,0,c
   789   000942  079D               	decf	(?_strcmp+1)& (0+255),f,b
   790   000944                     
   791                           ; BSR set to: 0
   792   000944  0012               	return		;funcret
   793   000946                     __end_of_strcmp:
   794                           	callstack 0
   795                           
   796 ;; *************** function _strcpy *****************
   797 ;; Defined at:
   798 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\strcpy.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;  dest            2    0[BANK0 ] PTR unsigned char 
   801 ;;		 -> main@s1(10), 
   802 ;;  src             2    2[BANK0 ] PTR const unsigned char 
   803 ;;		 -> main@s2(5), 
   804 ;; Auto vars:     Size  Location     Type
   805 ;;  d               2    6[BANK0 ] PTR unsigned char 
   806 ;;		 -> main@s1(10), 
   807 ;;  s               2    4[BANK0 ] PTR const unsigned char 
   808 ;;		 -> main@s2(5), 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  2    0[BANK0 ] PTR unsigned char 
   811 ;; Registers used:
   812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   818 ;;      Params:         0       4       0       0       0       0       0
   819 ;;      Locals:         0       4       0       0       0       0       0
   820 ;;      Temps:          0       0       0       0       0       0       0
   821 ;;      Totals:         0       8       0       0       0       0       0
   822 ;;Total ram usage:        8 bytes
   823 ;; Hardware stack levels used: 1
   824 ;; This function calls:
   825 ;;		Nothing
   826 ;; This function is called by:
   827 ;;		_main
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text4
   832   00099A                     __ptext4:
   833                           	callstack 0
   834   00099A                     _strcpy:
   835                           	callstack 30
   836   00099A  C098  F09A         	movff	strcpy@src,strcpy@s
   837   00099E  C099  F09B         	movff	strcpy@src+1,strcpy@s+1
   838   0009A2  C096  F09C         	movff	strcpy@dest,strcpy@d
   839   0009A6  C097  F09D         	movff	strcpy@dest+1,strcpy@d+1
   840   0009AA                     l904:
   841   0009AA  C09A  FFD9         	movff	strcpy@s,fsr2l
   842   0009AE  C09B  FFDA         	movff	strcpy@s+1,fsr2h
   843   0009B2  0100               	movlb	0	; () banked
   844   0009B4  4B9A               	infsnz	strcpy@s& (0+255),f,b
   845   0009B6  2B9B               	incf	(strcpy@s+1)& (0+255),f,b
   846   0009B8  C09C  FFE1         	movff	strcpy@d,fsr1l
   847   0009BC  C09D  FFE2         	movff	strcpy@d+1,fsr1h
   848   0009C0  4B9C               	infsnz	strcpy@d& (0+255),f,b
   849   0009C2  2B9D               	incf	(strcpy@d+1)& (0+255),f,b
   850   0009C4  CFDF FFE7          	movff	indf2,indf1
   851   0009C8  50E7               	movf	indf1,w,c
   852   0009CA  A4D8               	btfss	status,2,c
   853   0009CC  EFEA  F004         	goto	u181
   854   0009D0  EFEC  F004         	goto	u180
   855   0009D4                     u181:
   856   0009D4  EFD5  F004         	goto	l904
   857   0009D8                     u180:
   858   0009D8                     
   859                           ; BSR set to: 0
   860   0009D8  C096  F096         	movff	strcpy@dest,?_strcpy
   861   0009DC  C097  F097         	movff	strcpy@dest+1,?_strcpy+1
   862   0009E0                     
   863                           ; BSR set to: 0
   864   0009E0  0012               	return		;funcret
   865   0009E2                     __end_of_strcpy:
   866                           	callstack 0
   867                           
   868 ;; *************** function _metEnOrdre *****************
   869 ;; Defined at:
   870 ;;		line 122 in file "main.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  j               2   11[BANK0 ] int 
   875 ;;  i               2    9[BANK0 ] int 
   876 ;;  temp            1    8[BANK0 ] unsigned char 
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      void 
   879 ;; Registers used:
   880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   886 ;;      Params:         0       0       0       0       0       0       0
   887 ;;      Locals:         0       5       0       0       0       0       0
   888 ;;      Temps:          0       2       0       0       0       0       0
   889 ;;      Totals:         0       7       0       0       0       0       0
   890 ;;Total ram usage:        7 bytes
   891 ;; Hardware stack levels used: 1
   892 ;; Hardware stack levels required when called: 1
   893 ;; This function calls:
   894 ;;		___wmul
   895 ;; This function is called by:
   896 ;;		_main
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text5
   901   00063A                     __ptext5:
   902                           	callstack 0
   903   00063A                     _metEnOrdre:
   904                           	callstack 29
   905   00063A                     
   906                           ;main.c: 124:     char temp = 0;
   907   00063A  0E00               	movlw	0
   908   00063C  0100               	movlb	0	; force () banked
   909   00063E  6F9E               	movwf	metEnOrdre@temp& (0+255),b
   910                           
   911                           ;main.c: 125:     for(int i = 0; i < 10; i++ )
   912   000640  0E00               	movlw	0
   913   000642  0100               	movlb	0	; force () banked
   914   000644  6FA0               	movwf	(metEnOrdre@i+1)& (0+255),b
   915   000646  0E00               	movlw	0
   916   000648  6F9F               	movwf	metEnOrdre@i& (0+255),b
   917   00064A                     
   918                           ; BSR set to: 0
   919   00064A  0100               	movlb	0	; force () banked
   920   00064C  BFA0               	btfsc	(metEnOrdre@i+1)& (0+255),7,b
   921   00064E  EF32  F003         	goto	u221
   922   000652  51A0               	movf	(metEnOrdre@i+1)& (0+255),w,b
   923   000654  E109               	bnz	u220
   924   000656  0E0A               	movlw	10
   925   000658  5D9F               	subwf	metEnOrdre@i& (0+255),w,b
   926   00065A  A0D8               	btfss	status,0,c
   927   00065C  EF32  F003         	goto	u221
   928   000660  EF34  F003         	goto	u220
   929   000664                     u221:
   930   000664  EF36  F003         	goto	l940
   931   000668                     u220:
   932   000668  EFB9  F003         	goto	l54
   933   00066C                     l940:
   934                           
   935                           ; BSR set to: 0
   936                           ;main.c: 126:     {;main.c: 127:         for(int j = 0; j < 5; j++)
   937   00066C  0E00               	movlw	0
   938   00066E  0100               	movlb	0	; force () banked
   939   000670  6FA2               	movwf	(metEnOrdre@j+1)& (0+255),b
   940   000672  0E00               	movlw	0
   941   000674  6FA1               	movwf	metEnOrdre@j& (0+255),b
   942   000676                     
   943                           ; BSR set to: 0
   944   000676  0100               	movlb	0	; force () banked
   945   000678  BFA2               	btfsc	(metEnOrdre@j+1)& (0+255),7,b
   946   00067A  EF48  F003         	goto	u231
   947   00067E  51A2               	movf	(metEnOrdre@j+1)& (0+255),w,b
   948   000680  E109               	bnz	u230
   949   000682  0E05               	movlw	5
   950   000684  5DA1               	subwf	metEnOrdre@j& (0+255),w,b
   951   000686  A0D8               	btfss	status,0,c
   952   000688  EF48  F003         	goto	u231
   953   00068C  EF4A  F003         	goto	u230
   954   000690                     u231:
   955   000690  EF4C  F003         	goto	l946
   956   000694                     u230:
   957   000694  EFA7  F003         	goto	l956
   958   000698                     l946:
   959                           
   960                           ; BSR set to: 0
   961                           ;main.c: 128:         {;main.c: 129:             temp = g_nip[i][j];
   962   000698  C09F  F096         	movff	metEnOrdre@i,___wmul@multiplier
   963   00069C  C0A0  F097         	movff	metEnOrdre@i+1,___wmul@multiplier+1
   964   0006A0  0E00               	movlw	0
   965   0006A2  0100               	movlb	0	; force () banked
   966   0006A4  6F99               	movwf	(___wmul@multiplicand+1)& (0+255),b
   967   0006A6  0E05               	movlw	5
   968   0006A8  6F98               	movwf	___wmul@multiplicand& (0+255),b
   969   0006AA  EC0A  F005         	call	___wmul	;wreg free
   970   0006AE  0E01               	movlw	low _g_nip
   971   0006B0  0100               	movlb	0	; force () banked
   972   0006B2  2596               	addwf	?___wmul& (0+255),w,b
   973   0006B4  0100               	movlb	0	; force () banked
   974   0006B6  6F9C               	movwf	??_metEnOrdre& (0+255),b
   975   0006B8  0E06               	movlw	high _g_nip
   976   0006BA  0100               	movlb	0	; force () banked
   977   0006BC  2197               	addwfc	(?___wmul+1)& (0+255),w,b
   978   0006BE  0100               	movlb	0	; force () banked
   979   0006C0  6F9D               	movwf	(??_metEnOrdre+1)& (0+255),b
   980   0006C2  0100               	movlb	0	; force () banked
   981   0006C4  51A1               	movf	metEnOrdre@j& (0+255),w,b
   982   0006C6  0100               	movlb	0	; force () banked
   983   0006C8  279C               	addwf	??_metEnOrdre& (0+255),f,b
   984   0006CA  0100               	movlb	0	; force () banked
   985   0006CC  51A2               	movf	(metEnOrdre@j+1)& (0+255),w,b
   986   0006CE  0100               	movlb	0	; force () banked
   987   0006D0  239D               	addwfc	(??_metEnOrdre+1)& (0+255),f,b
   988   0006D2  C09C  FFF6         	movff	??_metEnOrdre,tblptrl
   989   0006D6  C09D  FFF7         	movff	??_metEnOrdre+1,tblptrh
   990   0006DA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   991   0006DA  6AF8               	clrf	tblptru,c
   992   0006DC                     	endif
   993   0006DC                     	if	0	;tblptru may be non-zero
   994   0006DC                     	endif
   995   0006DC  0008               	tblrd		*
   996   0006DE  CFF5 F09E          	movff	tablat,metEnOrdre@temp
   997   0006E2                     
   998                           ; BSR set to: 0
   999                           ;main.c: 130:             g_nipEnOrdre[i][j] = temp;
  1000   0006E2  C09F  F096         	movff	metEnOrdre@i,___wmul@multiplier
  1001   0006E6  C0A0  F097         	movff	metEnOrdre@i+1,___wmul@multiplier+1
  1002   0006EA  0E00               	movlw	0
  1003   0006EC  0100               	movlb	0	; force () banked
  1004   0006EE  6F99               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1005   0006F0  0E05               	movlw	5
  1006   0006F2  6F98               	movwf	___wmul@multiplicand& (0+255),b
  1007   0006F4  EC0A  F005         	call	___wmul	;wreg free
  1008   0006F8  0E60               	movlw	low _g_nipEnOrdre
  1009   0006FA  0100               	movlb	0	; force () banked
  1010   0006FC  2596               	addwf	?___wmul& (0+255),w,b
  1011   0006FE  0100               	movlb	0	; force () banked
  1012   000700  6F9C               	movwf	??_metEnOrdre& (0+255),b
  1013   000702  0E00               	movlw	high _g_nipEnOrdre
  1014   000704  0100               	movlb	0	; force () banked
  1015   000706  2197               	addwfc	(?___wmul+1)& (0+255),w,b
  1016   000708  0100               	movlb	0	; force () banked
  1017   00070A  6F9D               	movwf	(??_metEnOrdre+1)& (0+255),b
  1018   00070C  0100               	movlb	0	; force () banked
  1019   00070E  51A1               	movf	metEnOrdre@j& (0+255),w,b
  1020   000710  0100               	movlb	0	; force () banked
  1021   000712  259C               	addwf	??_metEnOrdre& (0+255),w,b
  1022   000714  6ED9               	movwf	fsr2l,c
  1023   000716  0100               	movlb	0	; force () banked
  1024   000718  51A2               	movf	(metEnOrdre@j+1)& (0+255),w,b
  1025   00071A  0100               	movlb	0	; force () banked
  1026   00071C  219D               	addwfc	(??_metEnOrdre+1)& (0+255),w,b
  1027   00071E  6EDA               	movwf	fsr2h,c
  1028   000720  C09E  FFDF         	movff	metEnOrdre@temp,indf2
  1029   000724                     
  1030                           ; BSR set to: 0
  1031                           ;main.c: 131:             temp = 0;
  1032   000724  0E00               	movlw	0
  1033   000726  0100               	movlb	0	; force () banked
  1034   000728  6F9E               	movwf	metEnOrdre@temp& (0+255),b
  1035   00072A                     
  1036                           ; BSR set to: 0
  1037                           ;main.c: 132:         }
  1038   00072A  0100               	movlb	0	; force () banked
  1039   00072C  4BA1               	infsnz	metEnOrdre@j& (0+255),f,b
  1040   00072E  2BA2               	incf	(metEnOrdre@j+1)& (0+255),f,b
  1041   000730                     
  1042                           ; BSR set to: 0
  1043   000730  0100               	movlb	0	; force () banked
  1044   000732  BFA2               	btfsc	(metEnOrdre@j+1)& (0+255),7,b
  1045   000734  EFA5  F003         	goto	u241
  1046   000738  51A2               	movf	(metEnOrdre@j+1)& (0+255),w,b
  1047   00073A  E109               	bnz	u240
  1048   00073C  0E05               	movlw	5
  1049   00073E  5DA1               	subwf	metEnOrdre@j& (0+255),w,b
  1050   000740  A0D8               	btfss	status,0,c
  1051   000742  EFA5  F003         	goto	u241
  1052   000746  EFA7  F003         	goto	u240
  1053   00074A                     u241:
  1054   00074A  EF4C  F003         	goto	l946
  1055   00074E                     u240:
  1056   00074E                     l956:
  1057                           
  1058                           ; BSR set to: 0
  1059                           ;main.c: 133:     }
  1060   00074E  0100               	movlb	0	; force () banked
  1061   000750  4B9F               	infsnz	metEnOrdre@i& (0+255),f,b
  1062   000752  2BA0               	incf	(metEnOrdre@i+1)& (0+255),f,b
  1063   000754                     
  1064                           ; BSR set to: 0
  1065   000754  0100               	movlb	0	; force () banked
  1066   000756  BFA0               	btfsc	(metEnOrdre@i+1)& (0+255),7,b
  1067   000758  EFB7  F003         	goto	u251
  1068   00075C  51A0               	movf	(metEnOrdre@i+1)& (0+255),w,b
  1069   00075E  E109               	bnz	u250
  1070   000760  0E0A               	movlw	10
  1071   000762  5D9F               	subwf	metEnOrdre@i& (0+255),w,b
  1072   000764  A0D8               	btfss	status,0,c
  1073   000766  EFB7  F003         	goto	u251
  1074   00076A  EFB9  F003         	goto	u250
  1075   00076E                     u251:
  1076   00076E  EF36  F003         	goto	l940
  1077   000772                     u250:
  1078   000772                     l54:
  1079                           
  1080                           ; BSR set to: 0
  1081   000772  0012               	return		;funcret
  1082   000774                     __end_of_metEnOrdre:
  1083                           	callstack 0
  1084                           
  1085 ;; *************** function ___wmul *****************
  1086 ;; Defined at:
  1087 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\Umul16.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1090 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1091 ;; Auto vars:     Size  Location     Type
  1092 ;;  product         2    4[BANK0 ] unsigned int 
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  2    0[BANK0 ] unsigned int 
  1095 ;; Registers used:
  1096 ;;		wreg, status,2, status,0, prodl, prodh
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1102 ;;      Params:         0       4       0       0       0       0       0
  1103 ;;      Locals:         0       2       0       0       0       0       0
  1104 ;;      Temps:          0       0       0       0       0       0       0
  1105 ;;      Totals:         0       6       0       0       0       0       0
  1106 ;;Total ram usage:        6 bytes
  1107 ;; Hardware stack levels used: 1
  1108 ;; This function calls:
  1109 ;;		Nothing
  1110 ;; This function is called by:
  1111 ;;		_verifNip
  1112 ;;		_trouveAQui
  1113 ;;		_metEnOrdre
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116                           
  1117                           	psect	text6
  1118   000A14                     __ptext6:
  1119                           	callstack 0
  1120   000A14                     ___wmul:
  1121                           	callstack 29
  1122   000A14  0100               	movlb	0	; () banked
  1123   000A16  5196               	movf	___wmul@multiplier& (0+255),w,b
  1124   000A18  0398               	mulwf	___wmul@multiplicand& (0+255),b
  1125   000A1A  CFF3 F09A          	movff	prodl,___wmul@product
  1126   000A1E  CFF4 F09B          	movff	prodh,___wmul@product+1
  1127   000A22  5196               	movf	___wmul@multiplier& (0+255),w,b
  1128   000A24  0399               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1129   000A26  50F3               	movf	243,w,c
  1130   000A28  279B               	addwf	(___wmul@product+1)& (0+255),f,b
  1131   000A2A  5197               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1132   000A2C  0398               	mulwf	___wmul@multiplicand& (0+255),b
  1133   000A2E  50F3               	movf	243,w,c
  1134   000A30  279B               	addwf	(___wmul@product+1)& (0+255),f,b
  1135   000A32                     
  1136                           ; BSR set to: 0
  1137   000A32  C09A  F096         	movff	___wmul@product,?___wmul
  1138   000A36  C09B  F097         	movff	___wmul@product+1,?___wmul+1
  1139   000A3A                     
  1140                           ; BSR set to: 0
  1141   000A3A  0012               	return		;funcret
  1142   000A3C                     __end_of___wmul:
  1143                           	callstack 0
  1144                           
  1145                           	psect	param0
  1146   000000                     
  1147                           	psect	idloc
  1148                           
  1149                           ;Config register IDLOC0 @ 0x200000
  1150                           ;	unspecified, using default values
  1151   200000                     	org	2097152
  1152   200000  FF                 	db	255
  1153                           
  1154                           ;Config register IDLOC1 @ 0x200001
  1155                           ;	unspecified, using default values
  1156   200001                     	org	2097153
  1157   200001  FF                 	db	255
  1158                           
  1159                           ;Config register IDLOC2 @ 0x200002
  1160                           ;	unspecified, using default values
  1161   200002                     	org	2097154
  1162   200002  FF                 	db	255
  1163                           
  1164                           ;Config register IDLOC3 @ 0x200003
  1165                           ;	unspecified, using default values
  1166   200003                     	org	2097155
  1167   200003  FF                 	db	255
  1168                           
  1169                           ;Config register IDLOC4 @ 0x200004
  1170                           ;	unspecified, using default values
  1171   200004                     	org	2097156
  1172   200004  FF                 	db	255
  1173                           
  1174                           ;Config register IDLOC5 @ 0x200005
  1175                           ;	unspecified, using default values
  1176   200005                     	org	2097157
  1177   200005  FF                 	db	255
  1178                           
  1179                           ;Config register IDLOC6 @ 0x200006
  1180                           ;	unspecified, using default values
  1181   200006                     	org	2097158
  1182   200006  FF                 	db	255
  1183                           
  1184                           ;Config register IDLOC7 @ 0x200007
  1185                           ;	unspecified, using default values
  1186   200007                     	org	2097159
  1187   200007  FF                 	db	255
  1188                           
  1189                           	psect	config
  1190                           
  1191                           ; Padding undefined space
  1192   300000                     	org	3145728
  1193   300000  FF                 	db	255
  1194                           
  1195                           ;Config register CONFIG1H @ 0x300001
  1196                           ;	Oscillator Selection bits
  1197                           ;	FOSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  1198                           ;	Fail-Safe Clock Monitor Enable bit
  1199                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1200                           ;	Internal/External Oscillator Switchover bit
  1201                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1202   300001                     	org	3145729
  1203   300001  08                 	db	8
  1204                           
  1205                           ;Config register CONFIG2L @ 0x300002
  1206                           ;	Power-up Timer Enable bit
  1207                           ;	PWRTEN = OFF, PWRT disabled
  1208                           ;	Brown-out Reset Enable bits
  1209                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1210                           ;	Brown Out Reset Voltage bits
  1211                           ;	BORV = 18, VBOR set to 1.8 V nominal
  1212   300002                     	org	3145730
  1213   300002  1F                 	db	31
  1214                           
  1215                           ;Config register CONFIG2H @ 0x300003
  1216                           ;	Watchdog Timer Enable bit
  1217                           ;	WDTEN = OFF, WDT is controlled by SWDTEN bit of the WDTCON register
  1218                           ;	Watchdog Timer Postscale Select bits
  1219                           ;	WDTPS = 32768, 1:32768
  1220   300003                     	org	3145731
  1221   300003  1E                 	db	30
  1222                           
  1223                           ; Padding undefined space
  1224   300004                     	org	3145732
  1225   300004  FF                 	db	255
  1226                           
  1227                           ;Config register CONFIG3H @ 0x300005
  1228                           ;	CCP2 MUX bit
  1229                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1230                           ;	PORTB A/D Enable bit
  1231                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1232                           ;	Low-Power Timer1 Oscillator Enable bit
  1233                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1234                           ;	HFINTOSC Fast Start-up
  1235                           ;	HFOFST = ON, HFINTOSC starts clocking the CPU without waiting for the oscillator to st
      +                          ablize.
  1236                           ;	MCLR Pin Enable bit
  1237                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1238   300005                     	org	3145733
  1239   300005  8B                 	db	139
  1240                           
  1241                           ;Config register CONFIG4L @ 0x300006
  1242                           ;	Stack Full/Underflow Reset Enable bit
  1243                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1244                           ;	Single-Supply ICSP Enable bit
  1245                           ;	LVP = OFF, Single-Supply ICSP disabled
  1246                           ;	Extended Instruction Set Enable bit
  1247                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1248                           ;	Background Debugger Enable bit
  1249                           ;	DEBUG = 0x1, unprogrammed default
  1250   300006                     	org	3145734
  1251   300006  81                 	db	129
  1252                           
  1253                           ; Padding undefined space
  1254   300007                     	org	3145735
  1255   300007  FF                 	db	255
  1256                           
  1257                           ;Config register CONFIG5L @ 0x300008
  1258                           ;	Code Protection Block 0
  1259                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1260                           ;	Code Protection Block 1
  1261                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1262                           ;	Code Protection Block 2
  1263                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1264                           ;	Code Protection Block 3
  1265                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1266   300008                     	org	3145736
  1267   300008  0F                 	db	15
  1268                           
  1269                           ;Config register CONFIG5H @ 0x300009
  1270                           ;	Boot Block Code Protection bit
  1271                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1272                           ;	Data EEPROM Code Protection bit
  1273                           ;	CPD = OFF, Data EEPROM not code-protected
  1274   300009                     	org	3145737
  1275   300009  C0                 	db	192
  1276                           
  1277                           ;Config register CONFIG6L @ 0x30000A
  1278                           ;	Write Protection Block 0
  1279                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1280                           ;	Write Protection Block 1
  1281                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1282                           ;	Write Protection Block 2
  1283                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1284                           ;	Write Protection Block 3
  1285                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1286   30000A                     	org	3145738
  1287   30000A  0F                 	db	15
  1288                           
  1289                           ;Config register CONFIG6H @ 0x30000B
  1290                           ;	Configuration Register Write Protection bit
  1291                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1292                           ;	Boot Block Write Protection bit
  1293                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1294                           ;	Data EEPROM Write Protection bit
  1295                           ;	WRTD = OFF, Data EEPROM not write-protected
  1296   30000B                     	org	3145739
  1297   30000B  E0                 	db	224
  1298                           
  1299                           ;Config register CONFIG7L @ 0x30000C
  1300                           ;	Table Read Protection Block 0
  1301                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1302                           ;	Table Read Protection Block 1
  1303                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1304                           ;	Table Read Protection Block 2
  1305                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1306                           ;	Table Read Protection Block 3
  1307                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1308   30000C                     	org	3145740
  1309   30000C  0F                 	db	15
  1310                           
  1311                           ;Config register CONFIG7H @ 0x30000D
  1312                           ;	Boot Block Table Read Protection bit
  1313                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1314   30000D                     	org	3145741
  1315   30000D  40                 	db	64
  1316                           tosu	equ	0xFFF
  1317                           tosh	equ	0xFFE
  1318                           tosl	equ	0xFFD
  1319                           stkptr	equ	0xFFC
  1320                           pclatu	equ	0xFFB
  1321                           pclath	equ	0xFFA
  1322                           pcl	equ	0xFF9
  1323                           tblptru	equ	0xFF8
  1324                           tblptrh	equ	0xFF7
  1325                           tblptrl	equ	0xFF6
  1326                           tablat	equ	0xFF5
  1327                           prodh	equ	0xFF4
  1328                           prodl	equ	0xFF3
  1329                           indf0	equ	0xFEF
  1330                           postinc0	equ	0xFEE
  1331                           postdec0	equ	0xFED
  1332                           preinc0	equ	0xFEC
  1333                           plusw0	equ	0xFEB
  1334                           fsr0h	equ	0xFEA
  1335                           fsr0l	equ	0xFE9
  1336                           wreg	equ	0xFE8
  1337                           indf1	equ	0xFE7
  1338                           postinc1	equ	0xFE6
  1339                           postdec1	equ	0xFE5
  1340                           preinc1	equ	0xFE4
  1341                           plusw1	equ	0xFE3
  1342                           fsr1h	equ	0xFE2
  1343                           fsr1l	equ	0xFE1
  1344                           bsr	equ	0xFE0
  1345                           indf2	equ	0xFDF
  1346                           postinc2	equ	0xFDE
  1347                           postdec2	equ	0xFDD
  1348                           preinc2	equ	0xFDC
  1349                           plusw2	equ	0xFDB
  1350                           fsr2h	equ	0xFDA
  1351                           fsr2l	equ	0xFD9
  1352                           status	equ	0xFD8

Data Sizes:
    Strings     5
    Constant    50
    Data        10
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      0       0
    BANK0           160     46     110
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(BANK0[12]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 10
		 -> main@s1(BANK0[10]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 10
		 -> main@s1(BANK0[10]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 5
		 -> main@s2(BANK0[5]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 5
		 -> main@s2(BANK0[5]), 

    strcmp@r	PTR const unsigned char  size(2) Largest target is 5
		 -> essaisNip@leNip(BANK0[5]), main@sonNip(BANK0[5]), 

    strcmp@l	PTR const unsigned char  size(2) Largest target is 50
		 -> g_nip(CODE[50]), 

    S543$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S543$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    trouveAQui@leNip	PTR unsigned char  size(2) Largest target is 5
		 -> essaisNip@leNip(BANK0[5]), main@sonNip(BANK0[5]), 

    verifNip@leNip	PTR unsigned char  size(2) Largest target is 5
		 -> main@sonNip(BANK0[5]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 10
		 -> main@s1(BANK0[10]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_trouveAQui
    _verifNip->_strcmp
    _trouveAQui->_strcmp
    _strcmp->___wmul
    _metEnOrdre->___wmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0    4188
                                             18 BANK0     28    28      0
                         _metEnOrdre
                             _strcpy
                         _trouveAQui
                           _verifNip
 ---------------------------------------------------------------------------------
 (1) _verifNip                                             4     0      4    1379
                                             12 BANK0      4     0      4
                             ___wmul
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _trouveAQui                                           6     4      2    1449
                                             12 BANK0      6     4      2
                             ___wmul
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4     416
                                              6 BANK0      6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               8     4      4     264
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _metEnOrdre                                           7     7      0     972
                                              6 BANK0      7     7      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _metEnOrdre
     ___wmul
   _strcpy
   _trouveAQui
     ___wmul
     _strcmp
       ___wmul (ARG)
   _verifNip
     ___wmul
     _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      18        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBIGSFR           A0      0       0      16        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2E      6E       5       68.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      0       0       1        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6E      17        0.0%
DATA                 0      0      6E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Nov 04 13:52:09 2023

                     l30 0834                       l40 08BE                       l41 08C6  
                     l34 0998                       l54 0772                       l57 0A3A  
    ___wmul@multiplicand 0098                      l902 099A                      l910 0946  
                    l904 09AA                      l912 0990                      l906 09D8  
                    l930 089A                      l922 0838                      l940 066C  
                    l764 09E0                      l932 08A0                      l924 083E  
                    l950 0724                      l942 0676                      l934 063A  
                    l758 0944                      l926 0848                      l918 0996  
                    l952 072A                      l936 064A                      l928 0892  
                    l960 0774                      l954 0730                      l946 0698  
                    l890 08FC                      l970 07C4                      l962 0786  
                    l948 06E2                      l956 074E                      l892 091A  
                    l884 08C8                      l980 0826                      l972 07D6  
                    l964 079E                      l958 0754                      l886 08CC  
                    l974 07E0                      l966 07A8                      l896 0A14  
                    l888 08D6                      l976 0806                      l968 07B2  
                    l898 0A32                      l978 0810                      u200 0892  
                    u201 088E                      u210 08BE                      u211 08BA  
                    u220 0668                      u221 0664                      u230 0694  
                    u231 0690                      u240 074E                      u160 08FC  
                    u241 074A                      u161 08F8                      u250 0772  
                    u170 091A                      u251 076E                      u171 0916  
                    u180 09D8                      u181 09D4                      u261 077E  
                    u190 0990                      u191 098C                      u271 07BC  
                    u280 0806                      u281 0802                      wreg 0FE8  
                   STR_1 0633                     _main 0774                     _seed 0092  
                   fsr1h 0FE2                     fsr2h 0FDA                     indf1 0FE7  
                   indf2 0FDF                     fsr1l 0FE1                     fsr2l 0FD9  
                   prodh 0FF4                     prodl 0FF3                     start 0000  
           ___param_bank 0000             main@nbEssais 00B2            verifNip@leNip 00A4  
          verifNip@index 00A2                    ?_main 0096              metEnOrdre@i 009F  
            metEnOrdre@j 00A1                    _g_nip 0601                    tablat 0FF5  
                  plusw1 0FE3                    plusw2 0FDB                    status 0FD8  
        __initialization 09E2             __end_of_main 0838                   ??_main 00A8  
          __activetblptr 0003                   ___wmul 0A14                   clear_0 0A08  
                 isa$std 0001                   main@s1 00A8                   main@s2 00B6  
                 _strcmp 08C8                   _strcpy 099A             __mediumconst 0000  
       __end_of_verifNip 099A                   tblptrh 0FF7                   tblptrl 0FF6  
                 tblptru 0FF8               __accesstop 0060  __end_of__initialization 0A0E  
          ___rparam_used 0000             __pidataBANK0 0A3C            __end_of_g_nip 0633  
             __pbssBANK0 0060             _g_nipEnOrdre 0060                  ?___wmul 0096  
                ?_strcmp 009C                  ?_strcpy 0096               _metEnOrdre 063A  
                __Hparam 0000                  __Lparam 0000                ?_verifNip 00A2  
           __psmallconst 0600                  __pcinit 09E2                  __ramtop 0600  
                __ptext0 0774                  __ptext1 0946                  __ptext2 0838  
                __ptext3 08C8                  __ptext4 099A                  __ptext5 063A  
                __ptext6 0A14         trouveAQui@retour 00A4     end_of_initialization 0A0E  
                postdec1 0FE5               ??_verifNip 00A6                  postinc0 0FEE  
                postinc2 0FDE                  strcmp@l 009C                  strcmp@r 009E  
                strcpy@d 009C                  strcpy@s 009A              ?_metEnOrdre 0096  
             main@sonNip 00BB               main@usager 00C2               _trouveAQui 0838  
         __end_of___wmul 0A3C           __end_of_strcmp 0946           __end_of_strcpy 09E2  
    start_initialization 09E2                 ??___wmul 009A              __pdataBANK0 00C4  
               ??_strcmp 00A0                 ??_strcpy 009A            __pcstackBANK0 0096  
            ?_trouveAQui 00A2              __smallconst 0600          trouveAQui@leNip 00A2  
         ___wmul@product 009A              trouveAQui@i 00A6                main@F3214 00C9  
              main@F3218 00C4        ___wmul@multiplier 0096                copy_data0 09F6  
           ??_metEnOrdre 009C                 __Hparam0 0000                 __Lparam0 0000  
     __end_of_metEnOrdre 0774           metEnOrdre@temp 009E               strcpy@dest 0096  
               isa$xinst 0000                 _verifNip 0946                 main@test 00C0  
              strcpy@src 0098             ??_trouveAQui 00A4       __end_of_trouveAQui 08C8  
